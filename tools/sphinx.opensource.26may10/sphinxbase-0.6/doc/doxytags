<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>ad.h</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/include/</path>
    <filename>ad_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">prim_type.h</includes>
    <class kind="struct">ad_rec_t</class>
    <class kind="struct">ad_play_t</class>
    <member kind="define">
      <type>#define</type>
      <name>AD_SAMPLE_SIZE</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>21e7cf6f08592c2fa2f78eb069f0e161</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFAULT_SAMPLES_PER_SEC</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>f6fb753bcfbd8dedec800ba4d0fb8546</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AD_OK</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>8d1358baba080a2f6b0d350928af7a89</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AD_EOF</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>8aa969c2d485c3c17cf9abfd1bb88bdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AD_ERR_GEN</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>d75f71249c0e72e6867599af315fe27d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AD_ERR_NOT_OPEN</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>7ac31adbbd108d40792fc6ba3d14929f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AD_ERR_WAVE</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>bdeca1c656c9ed4699402adb3556ae39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFAULT_DEVICE</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>84cb8bbda8042a324f49102bc200cc54</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ad_rec_t *</type>
      <name>ad_open_dev</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>43f66257a2457d6c711dc5c694bfc02f</anchor>
      <arglist>(const char *dev, int32 samples_per_sec)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ad_rec_t *</type>
      <name>ad_open_sps</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>71b4eec805fbe5c398ea0897816de6f0</anchor>
      <arglist>(int32 samples_per_sec)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ad_rec_t *</type>
      <name>ad_open</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>3def0da951e840fb4c72ef9259540686</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ad_start_rec</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>9cb212b93cb439ba04dec2109ca043ff</anchor>
      <arglist>(ad_rec_t *)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ad_stop_rec</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>20fb285a5f93e172f6a6e04359216aa5</anchor>
      <arglist>(ad_rec_t *)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ad_close</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>6bcf3ed5e9d0c2d51086cae93bc3b3fc</anchor>
      <arglist>(ad_rec_t *)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ad_read</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>d4a5f4ab5267003169f6d3e15e54f697</anchor>
      <arglist>(ad_rec_t *, int16 *buf, int32 max)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ad_play_t *</type>
      <name>ad_open_play_sps</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>89f8a1820e1c5ea658e692d2d15a7315</anchor>
      <arglist>(int32 samples_per_sec)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ad_play_t *</type>
      <name>ad_open_play</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>859bfe925f634f6bb3faa1a52c013388</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ad_start_play</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>899e10aaecde4ab33b9849ed7bb9fb73</anchor>
      <arglist>(ad_play_t *)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ad_stop_play</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>823c2efb2892ff2c9b112ffcda58ce17</anchor>
      <arglist>(ad_play_t *)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ad_close_play</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>a65454c205e3f573f4f3433a6a044448</anchor>
      <arglist>(ad_play_t *)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ad_write</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>ea278a0c26051f4fe011778f225ea9c4</anchor>
      <arglist>(ad_play_t *, int16 *buf, int32 len)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ad_mu2li</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>7eab4d2f35d221c569b85d4240b83600</anchor>
      <arglist>(int16 *outbuf, unsigned char *inbuf, int32 n_samp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>agc.h</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/include/</path>
    <filename>agc_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">prim_type.h</includes>
    <class kind="struct">agc_s</class>
    <member kind="typedef">
      <type>enum agc_type_e</type>
      <name>agc_type_t</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>5524df49e0425cc6b1c002bc704a8103</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct agc_s</type>
      <name>agc_t</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>4998d40c67716fdea6791f8070642dc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>agc_type_e</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>ef1d2c7e32d37aa84d70c2f3675fc923</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT agc_type_t</type>
      <name>agc_type_from_str</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>ebd0689591488378192e13f6d2646bc1</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT agc_t *</type>
      <name>agc_init</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>5c7ee7b19f8dcfd0c28b4dc76a283dc7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>agc_free</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>6a050fc4b079be05b1946636d5d7f3aa</anchor>
      <arglist>(agc_t *agc)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>agc_max</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>29a2a4dd80141af1c3476094c353b739</anchor>
      <arglist>(agc_t *agc, mfcc_t **mfc, int32 n_frame)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>agc_emax</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>c2cdd4c519b46824c5b28c5b769b5ecd</anchor>
      <arglist>(agc_t *agc, mfcc_t **mfc, int32 n_frame)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>agc_emax_update</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>f47b6004f2f963ae0019a67450b892c2</anchor>
      <arglist>(agc_t *agc)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT float32</type>
      <name>agc_emax_get</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>7b439fb5d36250d09bb9d459c1e28ba5</anchor>
      <arglist>(agc_t *agc)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>agc_emax_set</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>4fd17f224b5d8f7bfcaa9389d11716eb</anchor>
      <arglist>(agc_t *agc, float32 m)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>agc_noise</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>e65d4be1d74aea11b7e16e3777272d13</anchor>
      <arglist>(agc_t *agc, mfcc_t **mfc, int32 n_frame)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT float32</type>
      <name>agc_get_threshold</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>77d0987174a1b3c6e8fcd63fe82f33ce</anchor>
      <arglist>(agc_t *agc)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>agc_set_threshold</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>aaa9e15f192c91ad64c343b7c6db6714</anchor>
      <arglist>(agc_t *agc, float32 threshold)</arglist>
    </member>
    <member kind="variable">
      <type>SPHINXBASE_EXPORT const char *</type>
      <name>agc_type_str</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>6ea1b2b3d482cf08eb36084629503c80</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bio.h</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/include/</path>
    <filename>bio_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">prim_type.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>BYTE_ORDER_MAGIC</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>c08e1e4728563a03ff6c937bfa8fd845</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REVERSE_SENSE_SWAP_INT16</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>bf9af8ac9d8a67710371365812869c92</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REVERSE_SENSE_SWAP_INT32</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>2c277e579a007b5c46bd762a7d18b2cf</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>bio_readhdr</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>7a155ff51740f1d9a31f7bb7b6e4bc3a</anchor>
      <arglist>(FILE *fp, char ***name, char ***val, int32 *swap)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>bio_writehdr_version</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>9662c09be1f18377488dedb8e7ca0bfd</anchor>
      <arglist>(FILE *fp, char *version)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>bio_hdrarg_free</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>db3c858a50381aeff022ccd4271af2d9</anchor>
      <arglist>(char **name, char **val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>bio_fread</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>7068bb61e421bc46a6989cef3b37c833</anchor>
      <arglist>(void *buf, int32 el_sz, int32 n_el, FILE *fp, int32 swap, uint32 *chksum)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>bio_fwrite</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>3b131beb20492e1a6f46c9b4dd81a64e</anchor>
      <arglist>(void *buf, int32 el_sz, int32 n_el, FILE *fp, int32 swap, uint32 *chksum)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>bio_fread_1d</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>aeda1ca5a5c0ca5a9e5b4820c442bbe5</anchor>
      <arglist>(void **buf, size_t el_sz, uint32 *n_el, FILE *fp, int32 sw, uint32 *ck)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>bio_fread_2d</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>70604d0f8035f0868f9284fa82e4fdb8</anchor>
      <arglist>(void ***arr, size_t e_sz, uint32 *d1, uint32 *d2, FILE *fp, uint32 swap, uint32 *chksum)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>bio_fread_3d</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>ca6a6b71d02b9e5ca6b136a28640e0c1</anchor>
      <arglist>(void ****arr, size_t e_sz, uint32 *d1, uint32 *d2, uint32 *d3, FILE *fp, uint32 swap, uint32 *chksum)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>bio_verify_chksum</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>d07e2ee9f2f01d3ff3232008098295a0</anchor>
      <arglist>(FILE *fp, int32 byteswap, uint32 chksum)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bitvec.h</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/include/</path>
    <filename>bitvec_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">prim_type.h</includes>
    <includes id="ckd__alloc_8h" name="ckd_alloc.h" local="no" imported="no">ckd_alloc.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>BITVEC_BITS</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>a992f8d4c7dbe0b71bfd1e01ce279167</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>bitvec_size</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>1d82193826583f234a71cba32267d3f3</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>bitvec_alloc</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>866043a7ac23e137f6c2f2466f4abc70</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>bitvec_realloc</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>e53ebce7c4c616fdc601e8306aebcc4b</anchor>
      <arglist>(v, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>bitvec_free</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>5628e35c88ac7e91b99dce916758824a</anchor>
      <arglist>(v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>bitvec_set</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>e90878b8f2316f5733d83a3f47d378ac</anchor>
      <arglist>(v, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>bitvec_set_all</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>b7abefb917e02790e9384d3149ff461e</anchor>
      <arglist>(v, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>bitvec_clear</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>74b3387345ca2730a8067626878843fc</anchor>
      <arglist>(v, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>bitvec_clear_all</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>89f80d7a8040e9225f3c1c9bf102ae1d</anchor>
      <arglist>(v, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>bitvec_is_set</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>e323f80288b2ff946d6d8b0e38f791c9</anchor>
      <arglist>(v, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>bitvec_is_clear</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>8154409a6e05e7c1ed7f21eff5ed06d4</anchor>
      <arglist>(v, b)</arglist>
    </member>
    <member kind="typedef">
      <type>uint32</type>
      <name>bitvec_t</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>de0d20aa7e2ccec4e6fcf06419251f71</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT size_t</type>
      <name>bitvec_count_set</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>c8eeaf487cd029e23fffe676f9a77a10</anchor>
      <arglist>(bitvec_t *vec, size_t len)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>case.h</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/include/</path>
    <filename>case_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">prim_type.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>UPPER_CASE</name>
      <anchorfile>case_8h.html</anchorfile>
      <anchor>3299c549655d5af1fcbc384ee7fd68e3</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOWER_CASE</name>
      <anchorfile>case_8h.html</anchorfile>
      <anchor>44403ce2c3f4378aca12ffb732f24cef</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ucase</name>
      <anchorfile>case_8h.html</anchorfile>
      <anchor>79d99e36b7c2c36dcc6f7f0df746384e</anchor>
      <arglist>(char *str)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>lcase</name>
      <anchorfile>case_8h.html</anchorfile>
      <anchor>c0e30dac40f15762f39270f65bd8cdba</anchor>
      <arglist>(char *str)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>strcmp_nocase</name>
      <anchorfile>case_8h.html</anchorfile>
      <anchor>d276a997bd6709d986aa6e1e4e06c210</anchor>
      <arglist>(const char *str1, const char *str2)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>strncmp_nocase</name>
      <anchorfile>case_8h.html</anchorfile>
      <anchor>e7c2a7f29d72b9516a947f5c69a043db</anchor>
      <arglist>(const char *str1, const char *str2, size_t len)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ckd_alloc.h</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/include/</path>
    <filename>ckd__alloc_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">prim_type.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>ckd_calloc</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>a00ef21903bc4f8a972488417adc8d2e</anchor>
      <arglist>(n, sz)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ckd_malloc</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>8e89a31c3c70710a8e023a177084bff2</anchor>
      <arglist>(sz)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ckd_realloc</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>fd496738b3e114bd494c5a0955f1bfb3</anchor>
      <arglist>(ptr, sz)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ckd_salloc</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>d313f92478859f9e4ea99d0f6e78c393</anchor>
      <arglist>(ptr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ckd_calloc_2d</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>949e7b50fcd9697b1563fa57f50e9c4f</anchor>
      <arglist>(d1, d2, sz)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ckd_calloc_3d</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>f716d69c9fbde1d8b2678da9c260ddc7</anchor>
      <arglist>(d1, d2, d3, sz)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ckd_alloc_2d_ptr</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>d5d0dce212e97207af42803a3add00e1</anchor>
      <arglist>(d1, d2, bf, sz)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ckd_free_2d_ptr</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>0afe1152d34da544602e6ab1635e05b1</anchor>
      <arglist>(bf)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ckd_alloc_3d_ptr</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>b29a3fbbd58bc59aa2827eaeda090d06</anchor>
      <arglist>(d1, d2, d3, bf, sz)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ckd_free_3d_ptr</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>f03a0583f358dbee5200910d151b490e</anchor>
      <arglist>(bf)</arglist>
    </member>
    <member kind="function">
      <type>jmp_buf *</type>
      <name>ckd_set_jump</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>0ec6d92241b1912b10f59519d553acb9</anchor>
      <arglist>(jmp_buf *env, int abort)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ckd_fail</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>b81dfe13d2237c64182f06f66fab7b0e</anchor>
      <arglist>(char *format,...)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>__ckd_calloc__</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>903aef4c99a8f19b555a34c9e31c61f8</anchor>
      <arglist>(size_t n_elem, size_t elem_size, const char *caller_file, int caller_line)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>__ckd_malloc__</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>861f3b9f9730dd87a1dfaf3be2218fd0</anchor>
      <arglist>(size_t size, const char *caller_file, int caller_line)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>__ckd_realloc__</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>138dd425d0b3329aa214597cb3bd62bd</anchor>
      <arglist>(void *ptr, size_t new_size, const char *caller_file, int caller_line)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT char *</type>
      <name>__ckd_salloc__</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>d92dae54c994a4f90c842e42d05c494a</anchor>
      <arglist>(const char *origstr, const char *caller_file, int caller_line)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>__ckd_calloc_2d__</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>141713f7d0ac99eac338d6d8ae35b771</anchor>
      <arglist>(size_t d1, size_t d2, size_t elemsize, const char *caller_file, int caller_line)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>__ckd_calloc_3d__</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>19c770c65f642488f6045c442f53fc0c</anchor>
      <arglist>(size_t d1, size_t d2, size_t d3, size_t elemsize, const char *caller_file, int caller_line)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>__ckd_alloc_3d_ptr</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>f9a3ef2d363ee6a53429427d1d9327a6</anchor>
      <arglist>(size_t d1, size_t d2, size_t d3, void *store, size_t elem_size, char *caller_file, int caller_line)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>__ckd_alloc_2d_ptr</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>965f553ee64bbfbeda048d43393ae04b</anchor>
      <arglist>(size_t d1, size_t d2, void *store, size_t elem_size, char *caller_file, int caller_line)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ckd_free</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>31c6b405558620ac37599737b5722fbf</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ckd_free_2d</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>8246c071ac12e98b7e1df9fe6da15aef</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ckd_free_3d</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>443accde4663a4a07c6d147088614d57</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cmd_ln.h</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/include/</path>
    <filename>cmd__ln_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">prim_type.h</includes>
    <class kind="struct">arg_s</class>
    <member kind="define">
      <type>#define</type>
      <name>ARG_STRINGIFY</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>98a8fc7c21a0832cd44e3a6e10844b1e</anchor>
      <arglist>(s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ARG_STRINGIFY1</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>e71d493fb63447033e8797f44fe7bb8d</anchor>
      <arglist>(s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_boolean_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>159e691c95089689cf9a8f85a67830a6</anchor>
      <arglist>(c, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_set_boolean_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>d4984b45985a6c5e2b231cf1f9b44fe4</anchor>
      <arglist>(c, n, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_int32_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>744cba615ad615a3bb0fc309e0bfb4c8</anchor>
      <arglist>(c, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_float32_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>ac984a3d645ca2293a711dc77e9441e6</anchor>
      <arglist>(c, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_float64_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>d1ef54ed340feb9aa6cc0a32d4fe041e</anchor>
      <arglist>(c, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_set_int32_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>4e2c787a885bf6dd5f17c2ba94670bb1</anchor>
      <arglist>(c, n, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_set_float32_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>e6d8f136f938b0b997dbe4b5d4cbd7f6</anchor>
      <arglist>(c, n, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_set_float64_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>2fc588ffad9586cad2bf4649a6a26269</anchor>
      <arglist>(c, n, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_exists</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>35020ed4f3aae151fc654dea22dda028</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_access</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a332e626631dfa1b7d93267d1b2384ba</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_str</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>b5bd3d0b7f28a485411da21a5e3984b3</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_int32</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>d3c5abaaeda4f3fd4462a24d41db7589</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_float32</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>95b9ea6b4ef4a6ae9718b7df5fffdde8</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_float64</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>3468b03e9089e4b9b4ccd5b9e4347a9c</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_boolean</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>168e6f2cf367471406614a70d2b42ae8</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_set_str</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>dd9cb281562711418b6c795f5a6eb206</anchor>
      <arglist>(n, s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_set_int32</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>b63087898153823d7a7041669d60cfae</anchor>
      <arglist>(n, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_set_float32</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>2642012877117ba59dec59d5bfdbbed1</anchor>
      <arglist>(n, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_set_float64</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>e9b20503ea67f45dc43312d13068a127</anchor>
      <arglist>(n, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_set_boolean</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a6ee66099aca6807d03c70a9d3e5f2a3</anchor>
      <arglist>(n, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_print_help</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>ac4bb58af379a71fad4e1adc7fb4d476</anchor>
      <arglist>(f, d)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ARG_REQUIRED</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>b1f031eb9c89fa1bcae95b1c7532fb3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ARG_INTEGER</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>59c01ad9c48f29ac877ba14dc90808de</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ARG_FLOATING</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>c8a280a53349bdd41d15edb4fa37972f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ARG_STRING</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>4de5ed5fcf59a18b24bc9f6449cc9356</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ARG_BOOLEAN</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>c7d08ff59bb6905c3375162e75913e88</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REQARG_INTEGER</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>8186f2660ad6b63be15019598a8dbb36</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REQARG_FLOATING</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>92ac706b4ccd544ebea6e0ceaccf3873</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REQARG_STRING</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>baf37a6c677dde76bb1a211b818541bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REQARG_BOOLEAN</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>c98546cfe85afea642248ae3063c2258</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ARG_INT32</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>7ca1061dca6e8d4e7882bcefe1d15722</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ARG_FLOAT32</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>d9b1952e4f1def9ee6a88791375b3901</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ARG_FLOAT64</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>ceb617c8572cf5ad6257b35e6d8919e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REQARG_INT32</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>49a6267bbca65099157aad7c2adc52b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REQARG_FLOAT32</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>46a5db6810b67a506c6074a76f003798</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REQARG_FLOAT64</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>501b468ee6e97644b9ca75e4bf9cd1a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct arg_s</type>
      <name>arg_t</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>7555950a1a9a65eee866083bd8ce4301</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct cmd_ln_s</type>
      <name>cmd_ln_t</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>0c78d3d751be17a8c2d58ee81ae21182</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT cmd_ln_t *</type>
      <name>cmd_ln_init</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>fdba0ab4dfe8a3ad9d49a6732bd62c42</anchor>
      <arglist>(cmd_ln_t *inout_cmdln, arg_t const *defn, int32 strict,...)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT cmd_ln_t *</type>
      <name>cmd_ln_retain</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>975f5bf7b6f4fc95f426d1979281f73b</anchor>
      <arglist>(cmd_ln_t *cmdln)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>cmd_ln_free_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>26707fc85e87d8999e368a680e7873cd</anchor>
      <arglist>(cmd_ln_t *cmdln)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT cmd_ln_t *</type>
      <name>cmd_ln_parse_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a5a3a9e49198d8fd0dd3424fb880b6b6</anchor>
      <arglist>(cmd_ln_t *inout_cmdln, arg_t const *defn, int32 argc, char *argv[], int32 strict)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT cmd_ln_t *</type>
      <name>cmd_ln_parse_file_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>57f54649952a07b8bef888af4e416550</anchor>
      <arglist>(cmd_ln_t *inout_cmdln, arg_t const *defn, char const *filename, int32 strict)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT anytype_t *</type>
      <name>cmd_ln_access_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>c8d204103a24e39efefda608db8d81f7</anchor>
      <arglist>(cmd_ln_t *cmdln, char const *name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT char const *</type>
      <name>cmd_ln_str_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>f0aa15288e06fc8271298e4fa7cdc91a</anchor>
      <arglist>(cmd_ln_t *cmdln, char const *name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT long</type>
      <name>cmd_ln_int_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>3bf86d597effc163148fddf14c0d117a</anchor>
      <arglist>(cmd_ln_t *cmdln, char const *name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT double</type>
      <name>cmd_ln_float_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>2deca68514704cafbb7ec594b8ff38fe</anchor>
      <arglist>(cmd_ln_t *cmdln, char const *name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmd_ln_set_str_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>3868b219fd3eaf64e902db38145c1c59</anchor>
      <arglist>(cmd_ln_t *cmdln, char const *name, char const *str)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmd_ln_set_int_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>fd5eef797f4786d7a1ddf4a64018cc7d</anchor>
      <arglist>(cmd_ln_t *cmdln, char const *name, long iv)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmd_ln_set_float_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>71c02d36c1db0c1d4e6349bd253d9b59</anchor>
      <arglist>(cmd_ln_t *cmdln, char const *name, double fv)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>cmd_ln_exists_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>b4ad5ae130e3c2c042590b41768635e3</anchor>
      <arglist>(cmd_ln_t *cmdln, char const *name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmd_ln_print_help_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>103dabd597830caf65ec4ef3fdc71a1a</anchor>
      <arglist>(cmd_ln_t *cmdln, FILE *fp, const arg_t *defn)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>cmd_ln_parse</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>42447819b47aab58ee53f4745244f7f7</anchor>
      <arglist>(const arg_t *defn, int32 argc, char *argv[], int32 strict)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>cmd_ln_parse_file</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>b7970c08288fae94d211a4252381bc61</anchor>
      <arglist>(const arg_t *defn, char const *filename, int32 strict)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmd_ln_appl_enter</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>7b06faa9f83eb8a2b045f8cfb6b67d36</anchor>
      <arglist>(int argc, char *argv[], char const *default_argfn, const arg_t *defn)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmd_ln_appl_exit</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>97d5edba5ad53d97a159ac8ab9234de7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT cmd_ln_t *</type>
      <name>cmd_ln_get</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>6e10003b5e86ec317c1b78c0655972af</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmd_ln_free</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>439d3f832f92ae655f1028445aa91602</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cmn.h</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/include/</path>
    <filename>cmn_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">prim_type.h</includes>
    <class kind="struct">cmn_t</class>
    <member kind="define">
      <type>#define</type>
      <name>CMN_WIN_HWM</name>
      <anchorfile>cmn_8h.html</anchorfile>
      <anchor>bbf37b74032c295136b4b299ecfcedae</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMN_WIN</name>
      <anchorfile>cmn_8h.html</anchorfile>
      <anchor>500dafed8351d334da9290ec4f3f6ab3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum cmn_type_e</type>
      <name>cmn_type_t</name>
      <anchorfile>cmn_8h.html</anchorfile>
      <anchor>9384c411b10e9db9745cfb550a5c7652</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>cmn_type_e</name>
      <anchorfile>cmn_8h.html</anchorfile>
      <anchor>5bb134416e9e63a317eac20b0102bd59</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT cmn_type_t</type>
      <name>cmn_type_from_str</name>
      <anchorfile>cmn_8h.html</anchorfile>
      <anchor>cf5e65a03a0d74630add4a400fed0ce8</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT cmn_t *</type>
      <name>cmn_init</name>
      <anchorfile>cmn_8h.html</anchorfile>
      <anchor>7ba6ce5489afce232b9bb61bd2ebd20f</anchor>
      <arglist>(int32 veclen)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmn</name>
      <anchorfile>cmn_8h.html</anchorfile>
      <anchor>ccf10de8ef4d98b4bf591529cf16565e</anchor>
      <arglist>(cmn_t *cmn, mfcc_t **mfc, int32 varnorm, int32 n_frame)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmn_prior</name>
      <anchorfile>cmn_8h.html</anchorfile>
      <anchor>a622cf1b6a1b9a9bffd8f60b903bfc42</anchor>
      <arglist>(cmn_t *cmn, mfcc_t **incep, int32 varnorm, int32 nfr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmn_prior_update</name>
      <anchorfile>cmn_8h.html</anchorfile>
      <anchor>ae61df2ec71082520669fc63d94bb1ef</anchor>
      <arglist>(cmn_t *cmn)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmn_prior_set</name>
      <anchorfile>cmn_8h.html</anchorfile>
      <anchor>0f6f70d51143d6a33130650b8d4758ab</anchor>
      <arglist>(cmn_t *cmn, mfcc_t const *vec)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmn_prior_get</name>
      <anchorfile>cmn_8h.html</anchorfile>
      <anchor>4f624f5b805288f66fa05b79b1e4f383</anchor>
      <arglist>(cmn_t *cmn, mfcc_t *vec)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmn_free</name>
      <anchorfile>cmn_8h.html</anchorfile>
      <anchor>0f70f378107e3d4e861e39d4f76d8d50</anchor>
      <arglist>(cmn_t *cmn)</arglist>
    </member>
    <member kind="variable">
      <type>SPHINXBASE_EXPORT const char *</type>
      <name>cmn_type_str</name>
      <anchorfile>cmn_8h.html</anchorfile>
      <anchor>e2ab0bad7168386076c43fc2a421867f</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cont_ad.h</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/include/</path>
    <filename>cont__ad_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">prim_type.h</includes>
    <includes id="ad_8h" name="ad.h" local="no" imported="no">ad.h</includes>
    <class kind="struct">spseg_s</class>
    <class kind="struct">cont_ad_t</class>
    <member kind="define">
      <type>#define</type>
      <name>CONT_AD_STATE_SIL</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>2b7422b8273b64e5c9909f0d4ed2a109</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CONT_AD_STATE_SPEECH</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>a9664991fbf6001a8ee29e9be7dd667c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct spseg_s</type>
      <name>spseg_t</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>5153bcdd6b0bb75c8c37482a3c312c3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT cont_ad_t *</type>
      <name>cont_ad_init</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>f28bf56f17d5cfebf4d960ebed44ca64</anchor>
      <arglist>(ad_rec_t *ad, int32(*adfunc)(ad_rec_t *ad, int16 *buf, int32 max))</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT cont_ad_t *</type>
      <name>cont_ad_init_rawmode</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>1a9bbf961917827f5d03adcd409dda35</anchor>
      <arglist>(ad_rec_t *ad, int32(*adfunc)(ad_rec_t *ad, int16 *buf, int32 max))</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>cont_ad_read</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>e664132adc514db01a1d5c1209ded4ba</anchor>
      <arglist>(cont_ad_t *r, int16 *buf, int32 max)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>cont_ad_buffer_space</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>680721acc14ac191bbae3a4940ed357d</anchor>
      <arglist>(cont_ad_t *r)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>cont_ad_calib</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>7a1d0eaf8292a4549b00a97163999321</anchor>
      <arglist>(cont_ad_t *cont)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>cont_ad_calib_loop</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>8a575044cf22d96a5ec8fb20410b0065</anchor>
      <arglist>(cont_ad_t *r, int16 *buf, int32 max)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>cont_ad_calib_size</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>6a86e16fb673748be753e2a281ce837a</anchor>
      <arglist>(cont_ad_t *r)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>cont_ad_set_thresh</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>f9a8f9f66bbfd1ce48fe9366fafcc40d</anchor>
      <arglist>(cont_ad_t *cont, int32 sil, int32 sp)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>cont_ad_set_params</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>a402397c575922ea352afe5e66c02a34</anchor>
      <arglist>(cont_ad_t *r, int32 delta_sil, int32 delta_speech, int32 min_noise, int32 max_noise, int32 winsize, int32 speech_onset, int32 sil_onset, int32 leader, int32 trailer, float32 adapt_rate)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>cont_ad_get_params</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>edd013bc2c6aca14fba02049ed7645d7</anchor>
      <arglist>(cont_ad_t *r, int32 *delta_sil, int32 *delta_speech, int32 *min_noise, int32 *max_noise, int32 *winsize, int32 *speech_onset, int32 *sil_onset, int32 *leader, int32 *trailer, float32 *adapt_rate)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>cont_ad_reset</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>12a017ea8a96dc54445e937bb9de24ae</anchor>
      <arglist>(cont_ad_t *cont)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>cont_ad_close</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>381c3df971d43a20e8e8b8da43d2872d</anchor>
      <arglist>(cont_ad_t *cont)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cont_ad_powhist_dump</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>288394cd94a4992bec9d3911cc875767</anchor>
      <arglist>(FILE *fp, cont_ad_t *cont)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>cont_ad_detach</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>8f8284f329d1c0e04856ec9d13020dc4</anchor>
      <arglist>(cont_ad_t *c)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>cont_ad_attach</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>41e7f8c5925dba26dd51e8f7a3d16404</anchor>
      <arglist>(cont_ad_t *c, ad_rec_t *a, int32(*func)(ad_rec_t *, int16 *, int32))</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>cont_ad_set_rawfp</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>662ed7c409479060e3b5ac8eb7bd1865</anchor>
      <arglist>(cont_ad_t *c, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>cont_ad_set_logfp</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>16c5810eb19ed89522ef4c3394bbfe83</anchor>
      <arglist>(cont_ad_t *c, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>cont_set_thresh</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>382fe6375eae57a532c524d68bc3dd24</anchor>
      <arglist>(cont_ad_t *r, int32 silence, int32 speech)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>err.h</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/include/</path>
    <filename>err_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>E_FATAL</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>1a4495946ab2449d61108fe829a94613</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>E_FATAL_SYSTEM</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>5229a1d58f5f5e69963a8d038ff5bc3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>E_WARN_SYSTEM</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>63de511eaca101291914f701e67c5c44</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>E_ERROR_SYSTEM</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>54ffbfe898d74595c586a1f48f32ef03</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>E_INFO</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>c3c705943d946708cea0a1443be1c853</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>E_INFOCONT</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>e5a17ac5be8c738d3d977b1bea2d4538</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>E_INFO_NOFN</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>d95ccef073dd6f3c81c84e6aedca1f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>E_WARN</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>6a794bec721b555ac1f2167f9e12f662</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>E_ERROR</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>5f7b2f58f5a663a6bdd51f197ae21993</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>E_DEBUG</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>f46f94d0e21f22f1153f8f1cd9a372d6</anchor>
      <arglist>(level, x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>E_DEBUGCONT</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>7e8c4b068434a0424751fc2d2c457807</anchor>
      <arglist>(level, x)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>_E__pr_header</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>96379bbd8a6c62698d166e5d12f3370d</anchor>
      <arglist>(char const *file, long line, char const *msg)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>_E__pr_debug_header</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>173ee0173de4543e08d9d7a38ce18b88</anchor>
      <arglist>(char const *file, long line, int level)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>_E__pr_info_header</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>583592f006ae14756c0c4812048c9b5f</anchor>
      <arglist>(char const *file, long line, char const *tag)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>_E__pr_info_header_wofn</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>bb0389e05db688aee439b339f7f6ed89</anchor>
      <arglist>(char const *msg)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>_E__pr_warn</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>3c2a4f988b27b2fa9baaa8ecd3f1e61f</anchor>
      <arglist>(char const *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>_E__pr_info</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>04fbf9d2c44e4e72f64cd3e2f5a24c38</anchor>
      <arglist>(char const *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>_E__die_error</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>e2149bb7cde661a9bee0bdaaea7fab2d</anchor>
      <arglist>(char const *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>_E__abort_error</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>0cdeb87987f0c30cd0c99826f9a1f7a8</anchor>
      <arglist>(char const *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>_E__sys_error</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>750133ab0eeba2bceba2a4054469857b</anchor>
      <arglist>(char const *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>_E__fatal_sys_error</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>39faf53d575084585f79fe685943e95a</anchor>
      <arglist>(char const *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT FILE *</type>
      <name>err_set_logfp</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>8bac37b001e58048b9f52ea1c756fc08</anchor>
      <arglist>(FILE *logfp)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT FILE *</type>
      <name>err_get_logfp</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>9707012f263e46ea66e93349313ddbe6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>err_set_logfile</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>a605de73499066475ec4cfb03e4c5a20</anchor>
      <arglist>(char const *file)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>err_set_debug_level</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>b77fa009824260d9f103308272dc89b8</anchor>
      <arglist>(int level)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>err_get_debug_level</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>1500dc011016aa15244d0d7f2fe66a7e</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>feat.h</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/include/</path>
    <filename>feat_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">prim_type.h</includes>
    <includes id="cmn_8h" name="cmn.h" local="no" imported="no">cmn.h</includes>
    <includes id="agc_8h" name="agc.h" local="no" imported="no">agc.h</includes>
    <class kind="struct">feat_s</class>
    <member kind="define">
      <type>#define</type>
      <name>LIVEBUFBLOCKSIZE</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>0e0d4a6b5ad951229bec259ce9637325</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>S3_MAX_FRAMES</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>7858f0e32903e11a6cb9d659ad4f6542</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cepstral_to_feature_command_line_macro</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>da461d1a4db89192fbd7d8a7e15ca22d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>feat_name</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>196b41ab9dfffcea885ee1a9075ede9e</anchor>
      <arglist>(f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>feat_cepsize</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>c691993ec890de3daefbcffe89788f5a</anchor>
      <arglist>(f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>feat_window_size</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>69cdcd91578c26565c7653ad6f2eb510</anchor>
      <arglist>(f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>feat_n_stream</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>1fe686c88d5b0598d7509af21acd9b76</anchor>
      <arglist>(f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>feat_stream_len</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>3d50283fc416fff87f3b907a12c2c11e</anchor>
      <arglist>(f, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>feat_dimension1</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>badd19e2cc72df33e81e9d73a7ddffdb</anchor>
      <arglist>(f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>feat_dimension2</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>5bd29a80c7f23f281d55555757f97f34</anchor>
      <arglist>(f, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>feat_dimension</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>66dc16aeea4307bf36ec4e08e05d0c7c</anchor>
      <arglist>(f)</arglist>
    </member>
    <member kind="typedef">
      <type>struct feat_s</type>
      <name>feat_t</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>cce3586bdd820afe9518147a6ada8bd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32 **</type>
      <name>parse_subvecs</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>613aca09a7f45f5ddc550efe685cb83b</anchor>
      <arglist>(char const *str)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>subvecs_free</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>d209a1028b315a96a3a2447eccdb8605</anchor>
      <arglist>(int32 **subvecs)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>feat_s2mfc_read</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>2ae638cb35d8fa1b3f509972b7c37eb3</anchor>
      <arglist>(char *file, int32 win, int32 sf, int32 ef, mfcc_t ***out_mfc, int32 maxfr, int32 cepsize)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT mfcc_t ***</type>
      <name>feat_array_alloc</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>03071d6d5c6b233117871f583c258b1e</anchor>
      <arglist>(feat_t *fcb, int32 nfr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>feat_array_free</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>d5c87f80af670b7a949af65bc3ba82a8</anchor>
      <arglist>(mfcc_t ***feat)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT feat_t *</type>
      <name>feat_init</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>7a5e2e02e99e368e1e9e3b1ded35e3dc</anchor>
      <arglist>(char const *type, cmn_type_t cmn, int32 varnorm, agc_type_t agc, int32 breport, int32 cepsize)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>feat_read_lda</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>7639fbc34e3328d7e3259e61372c64b8</anchor>
      <arglist>(feat_t *feat, const char *ldafile, int32 dim)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>feat_lda_transform</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>7452702cb435ea9244c7e1f61bbf5da1</anchor>
      <arglist>(feat_t *fcb, mfcc_t ***inout_feat, uint32 nfr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>feat_set_subvecs</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>9a79c7278d484fa8178cd7c06156b794</anchor>
      <arglist>(feat_t *fcb, int32 **subvecs)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>feat_print</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>feaef030a5ec32c2164b5bd55e912714</anchor>
      <arglist>(feat_t *fcb, mfcc_t ***feat, int32 nfr, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>feat_s2mfc2feat</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>918e21c2b28a6951a83c64f7023126a7</anchor>
      <arglist>(feat_t *fcb, const char *file, const char *dir, const char *cepext, int32 sf, int32 ef, mfcc_t ***feat, int32 maxfr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>feat_s2mfc2feat_live</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>68bf7d2c15e3f76b08833449eb254aed</anchor>
      <arglist>(feat_t *fcb, mfcc_t **uttcep, int32 *inout_ncep, int32 beginutt, int32 endutt, mfcc_t ***ofeat)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT feat_t *</type>
      <name>feat_retain</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>80d6eabf01ff119d324a07c1de8fda80</anchor>
      <arglist>(feat_t *f)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>feat_free</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>98463b4ab5fe4265fc817523b0e25ee9</anchor>
      <arglist>(feat_t *f)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>feat_report</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>e3e67bd629f9756ddb6c5a599d223f6e</anchor>
      <arglist>(feat_t *f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>filename.h</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/include/</path>
    <filename>filename_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">prim_type.h</includes>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>path2basename</name>
      <anchorfile>filename_8h.html</anchorfile>
      <anchor>d8a88d52ec0af498bc126a90871b2efe</anchor>
      <arglist>(const char *path, char *base)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>path2dirname</name>
      <anchorfile>filename_8h.html</anchorfile>
      <anchor>678be92ddb74695f26a9e4f527b073b0</anchor>
      <arglist>(const char *path, char *dir)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>strip_fileext</name>
      <anchorfile>filename_8h.html</anchorfile>
      <anchor>d40b54252813d276ff2ebb097b242657</anchor>
      <arglist>(const char *file, char *root)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>path_is_absolute</name>
      <anchorfile>filename_8h.html</anchorfile>
      <anchor>c59add2db73b33e81b354de114268e7a</anchor>
      <arglist>(const char *file)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>genrand.h</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/include/</path>
    <filename>genrand_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>S3_RAND_MAX_INT32</name>
      <anchorfile>genrand_8h.html</anchorfile>
      <anchor>29d6253e4a57e7c4d56cf7f6155b4007</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>s3_rand_seed</name>
      <anchorfile>genrand_8h.html</anchorfile>
      <anchor>88ed88daecb88e115d8559c1b0a09bb7</anchor>
      <arglist>(s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>s3_rand_int31</name>
      <anchorfile>genrand_8h.html</anchorfile>
      <anchor>3dcc058023a95c0a0ca1f12d1fdec9b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>s3_rand_real</name>
      <anchorfile>genrand_8h.html</anchorfile>
      <anchor>85a5844eace98dcbb4742d408a75d5e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>s3_rand_res53</name>
      <anchorfile>genrand_8h.html</anchorfile>
      <anchor>226b9a1deec002aeb1f1775b830a3062</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>genrand_seed</name>
      <anchorfile>genrand_8h.html</anchorfile>
      <anchor>2881c7b606d9a2b2852e5946d71d32b7</anchor>
      <arglist>(unsigned long s)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT long</type>
      <name>genrand_int31</name>
      <anchorfile>genrand_8h.html</anchorfile>
      <anchor>10263695978c84103fb3526fdae21d4c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT double</type>
      <name>genrand_real3</name>
      <anchorfile>genrand_8h.html</anchorfile>
      <anchor>d5fbfda1cb738d2beff277444bc71b1a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT double</type>
      <name>genrand_res53</name>
      <anchorfile>genrand_8h.html</anchorfile>
      <anchor>2fca03c5dad1835f55e09c6e66d3b960</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>glist.h</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/include/</path>
    <filename>glist_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">prim_type.h</includes>
    <class kind="struct">gnode_s</class>
    <member kind="define">
      <type>#define</type>
      <name>gnode_ptr</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>ce56682f14d84cc456c805d26fd86734</anchor>
      <arglist>(g)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>gnode_int32</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>7daab0205c40d1b449529ee4cc54522b</anchor>
      <arglist>(g)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>gnode_uint32</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>3af0cc8d5d612e85fa433ac3edf42fd6</anchor>
      <arglist>(g)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>gnode_float32</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>af6a2bdc69642303426c20fc0bdfa5f6</anchor>
      <arglist>(g)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>gnode_float64</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>bfea8eee77afc1e3046ef33ae6c0f5b4</anchor>
      <arglist>(g)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>gnode_next</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>33fc794db097ba2a5a36eba12c418993</anchor>
      <arglist>(g)</arglist>
    </member>
    <member kind="typedef">
      <type>struct gnode_s</type>
      <name>gnode_t</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>35eee566c2974c9a3e3055daf1611793</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gnode_t *</type>
      <name>glist_t</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>576a9ce77a5af8b912e75b32bce607f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT glist_t</type>
      <name>glist_add_ptr</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>77a9c20b7df5a289477af405ab778377</anchor>
      <arglist>(glist_t g, void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT glist_t</type>
      <name>glist_add_int32</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>28adfcc24a784aaed1a0b3c4c4de4c42</anchor>
      <arglist>(glist_t g, int32 val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT glist_t</type>
      <name>glist_add_uint32</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>eb741d435322f34df5e5d3a99abf00de</anchor>
      <arglist>(glist_t g, uint32 val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT glist_t</type>
      <name>glist_add_float32</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>4fc4db2fbebd7b659554227d411f6737</anchor>
      <arglist>(glist_t g, float32 val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT glist_t</type>
      <name>glist_add_float64</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>5bdd11639ef5846abb7ceb6caf059f4e</anchor>
      <arglist>(glist_t g, float64 val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT gnode_t *</type>
      <name>glist_insert_ptr</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>2d641da6b349c1c939e3b954382513ba</anchor>
      <arglist>(gnode_t *gn, void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT gnode_t *</type>
      <name>glist_insert_int32</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>327b6478ee05ac17e3c3b3189579413e</anchor>
      <arglist>(gnode_t *gn, int32 val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT gnode_t *</type>
      <name>glist_insert_uint32</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>b7e58ee641d3648f047eef70a20a4647</anchor>
      <arglist>(gnode_t *gn, uint32 val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT gnode_t *</type>
      <name>glist_insert_float32</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>ff08aed022168872fc9d30cd299df2ce</anchor>
      <arglist>(gnode_t *gn, float32 val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT gnode_t *</type>
      <name>glist_insert_float64</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>97a682e38319dd8f67765732467110f9</anchor>
      <arglist>(gnode_t *gn, float64 val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT glist_t</type>
      <name>glist_reverse</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>399a2a093c6c4ce1012762e4c25c8185</anchor>
      <arglist>(glist_t g)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>glist_count</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>eb046e39c540d2f5f792119ea0d24c48</anchor>
      <arglist>(glist_t g)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>glist_free</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>45380e15d2c33afc554fd60a8828580c</anchor>
      <arglist>(glist_t g)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT gnode_t *</type>
      <name>gnode_free</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>68b51aea4de463b284a19668a713d502</anchor>
      <arglist>(gnode_t *gn, gnode_t *pred)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT gnode_t *</type>
      <name>glist_tail</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>6921d6b8b11cb9e05fadeaa091e89234</anchor>
      <arglist>(glist_t g)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>hash_table.h</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/include/</path>
    <filename>hash__table_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">prim_type.h</includes>
    <includes id="glist_8h" name="glist.h" local="no" imported="no">glist.h</includes>
    <class kind="struct">hash_entry_s</class>
    <class kind="struct">hash_table_t</class>
    <class kind="struct">hash_iter_s</class>
    <member kind="define">
      <type>#define</type>
      <name>hash_entry_val</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>c98525ff8ec582358783aecbd388842d</anchor>
      <arglist>(e)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>hash_entry_key</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>a9ff378b212469b2ec6dde13b6f0934b</anchor>
      <arglist>(e)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>hash_entry_len</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>4c0d92dd662edb83d572dc2fef278816</anchor>
      <arglist>(e)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>hash_table_inuse</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>47264dff359c0a0d4c144e54d0819ce9</anchor>
      <arglist>(h)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>hash_table_size</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>a0d9d0efddc207e3d7be3c417dcd7128</anchor>
      <arglist>(h)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HASH_CASE_YES</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>30fbbcfa2a2d360c2a8960b960ae34a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HASH_CASE_NO</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>ec1a9795611575f717b08d2bad5d6f83</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>hash_table_enter_int32</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>393c56322e54607a48e6bc61169d92bf</anchor>
      <arglist>(h, k, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>hash_table_replace_int32</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>4286033aa772a9d1f3aa219469324f5b</anchor>
      <arglist>(h, k, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>hash_table_enter_bkey_int32</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>da31c1e0bcf359a7ca934748f4680333</anchor>
      <arglist>(h, k, l, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>hash_table_replace_bkey_int32</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>ce238b264acacb8e6cb0de14f1035f53</anchor>
      <arglist>(h, k, l, v)</arglist>
    </member>
    <member kind="typedef">
      <type>struct hash_entry_s</type>
      <name>hash_entry_t</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>f70e2b25a853da786ffd99731a5fac5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct hash_iter_s</type>
      <name>hash_iter_t</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>8febad57d856465fb33dd11cabc57dcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT hash_table_t *</type>
      <name>hash_table_new</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>56d93e8c03e066b77377ac6eab50cfae</anchor>
      <arglist>(int32 size, int32 casearg)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>hash_table_free</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>0a588c22946f8cc16328973035ed19e3</anchor>
      <arglist>(hash_table_t *h)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>hash_table_enter</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>ebfe63c3869c271b125a8413ee384412</anchor>
      <arglist>(hash_table_t *h, const char *key, void *val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>hash_table_replace</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>e61b28ea189a98ef8f2a3c5521482968</anchor>
      <arglist>(hash_table_t *h, const char *key, void *val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>hash_table_delete</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>f1d87b1b825c302473f2d7c5a3b88475</anchor>
      <arglist>(hash_table_t *h, const char *key)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>hash_table_delete_bkey</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>a2ab1f5eb2f1b4689645d1e1c19dc887</anchor>
      <arglist>(hash_table_t *h, const char *key, size_t len)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>hash_table_empty</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>cab374d21e25009d397642e3465308c7</anchor>
      <arglist>(hash_table_t *h)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>hash_table_enter_bkey</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>6f5752fadefe2662adb2c141f1511062</anchor>
      <arglist>(hash_table_t *h, const char *key, size_t len, void *val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>hash_table_replace_bkey</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>273237d63833e5625c830f421d9463de</anchor>
      <arglist>(hash_table_t *h, const char *key, size_t len, void *val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>hash_table_lookup</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>9a1e5ed410eb96f514b00fdce770fbd7</anchor>
      <arglist>(hash_table_t *h, const char *key, void **val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>hash_table_lookup_int32</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>caf27e8e7e336faf6653649937c42ed8</anchor>
      <arglist>(hash_table_t *h, const char *key, int32 *val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>hash_table_lookup_bkey</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>91f5b3924c0e3a50f94c86bb5fd078e8</anchor>
      <arglist>(hash_table_t *h, const char *key, size_t len, void **val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>hash_table_lookup_bkey_int32</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>cc530eda0b105745cf3a47cc3c1148e4</anchor>
      <arglist>(hash_table_t *h, const char *key, size_t len, int32 *val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT hash_iter_t *</type>
      <name>hash_table_iter</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>ae6e6373d3c371d57861a9a875edb207</anchor>
      <arglist>(hash_table_t *h)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT hash_iter_t *</type>
      <name>hash_table_iter_next</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>d023321efab26a30bd6d855fbdbe08a3</anchor>
      <arglist>(hash_iter_t *itor)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>hash_table_iter_free</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>7aa43b228d7dc24f5221d281debeb025</anchor>
      <arglist>(hash_iter_t *itor)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT glist_t</type>
      <name>hash_table_tolist</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>61f59389f05d8871003da4692a9c2acc</anchor>
      <arglist>(hash_table_t *h, int32 *count)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>hash_table_display</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>2721f6b601c80ceeeae570589fd12e38</anchor>
      <arglist>(hash_table_t *h, int32 showkey)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>heap.h</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/include/</path>
    <filename>heap_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">prim_type.h</includes>
    <member kind="typedef">
      <type>void *</type>
      <name>heap_t</name>
      <anchorfile>heap_8h.html</anchorfile>
      <anchor>940dac139dbe58a03237e72a176833a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT heap_t</type>
      <name>heap_new</name>
      <anchorfile>heap_8h.html</anchorfile>
      <anchor>5b174d0db189ce4c517aa24d71c562dd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>heap_insert</name>
      <anchorfile>heap_8h.html</anchorfile>
      <anchor>d1c648ca164bf39d03431d7126ef4a8d</anchor>
      <arglist>(heap_t heap, void *data, int32 val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>heap_top</name>
      <anchorfile>heap_8h.html</anchorfile>
      <anchor>06cc985d3d5a4c275179fd47ede7316d</anchor>
      <arglist>(heap_t heap, void **data, int32 *val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>heap_pop</name>
      <anchorfile>heap_8h.html</anchorfile>
      <anchor>098bf692ecfc3ee7f3b49a72adc8c7b7</anchor>
      <arglist>(heap_t heap, void **data, int32 *val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>heap_size</name>
      <anchorfile>heap_8h.html</anchorfile>
      <anchor>42a4791822d16ccabd72906b4b6892c6</anchor>
      <arglist>(heap_t heap)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>heap_destroy</name>
      <anchorfile>heap_8h.html</anchorfile>
      <anchor>d8d290888b0cf3bf94b0296d93a61c8e</anchor>
      <arglist>(heap_t heap)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>huff_code.h</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/include/</path>
    <filename>huff__code_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">prim_type.h</includes>
    <includes id="cmd__ln_8h" name="cmd_ln.h" local="no" imported="no">cmd_ln.h</includes>
    <member kind="typedef">
      <type>struct huff_code_s</type>
      <name>huff_code_t</name>
      <anchorfile>huff__code_8h.html</anchorfile>
      <anchor>99a5188e6a18682c96100cd5232af0f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>huff_code_t *</type>
      <name>huff_code_build_int</name>
      <anchorfile>huff__code_8h.html</anchorfile>
      <anchor>eac9c787bd2b0c44645fc36668c8cb72</anchor>
      <arglist>(int32 const *values, int32 const *frequencies, int nvals)</arglist>
    </member>
    <member kind="function">
      <type>huff_code_t *</type>
      <name>huff_code_build_str</name>
      <anchorfile>huff__code_8h.html</anchorfile>
      <anchor>e36c06fbf1ea3d3d8b8898489b8d0555</anchor>
      <arglist>(char *const *values, int32 const *frequencies, int nvals)</arglist>
    </member>
    <member kind="function">
      <type>huff_code_t *</type>
      <name>huff_code_read</name>
      <anchorfile>huff__code_8h.html</anchorfile>
      <anchor>56e0b59ab72965a106d981edfcb80a58</anchor>
      <arglist>(FILE *infh)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>huff_code_write</name>
      <anchorfile>huff__code_8h.html</anchorfile>
      <anchor>00510cb2e10d3257cebb637c1f92967e</anchor>
      <arglist>(huff_code_t *hc, FILE *outfh)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>huff_code_dump</name>
      <anchorfile>huff__code_8h.html</anchorfile>
      <anchor>13073aec67ffe7c7d01dfeba7aefacf8</anchor>
      <arglist>(huff_code_t *hc, FILE *dumpfh)</arglist>
    </member>
    <member kind="function">
      <type>huff_code_t *</type>
      <name>huff_code_retain</name>
      <anchorfile>huff__code_8h.html</anchorfile>
      <anchor>65f498a58da214934dd19d6892bd838d</anchor>
      <arglist>(huff_code_t *hc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>huff_code_free</name>
      <anchorfile>huff__code_8h.html</anchorfile>
      <anchor>e11af2c92c2eb047cb926dd97789eea2</anchor>
      <arglist>(huff_code_t *hc)</arglist>
    </member>
    <member kind="function">
      <type>FILE *</type>
      <name>huff_code_attach</name>
      <anchorfile>huff__code_8h.html</anchorfile>
      <anchor>967b15414f2a48342cdf8dd6488a934a</anchor>
      <arglist>(huff_code_t *hc, FILE *fh, char const *mode)</arglist>
    </member>
    <member kind="function">
      <type>FILE *</type>
      <name>huff_code_detach</name>
      <anchorfile>huff__code_8h.html</anchorfile>
      <anchor>197d8985c1f32747b5b1b116b246ccc2</anchor>
      <arglist>(huff_code_t *hc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>huff_code_encode_int</name>
      <anchorfile>huff__code_8h.html</anchorfile>
      <anchor>2813bf45e26e8af3d3bb37c4821a3cc4</anchor>
      <arglist>(huff_code_t *hc, int32 sym, uint32 *outcw)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>huff_code_encode_str</name>
      <anchorfile>huff__code_8h.html</anchorfile>
      <anchor>2312cc30520a54f4e46a92fefa82fe7d</anchor>
      <arglist>(huff_code_t *hc, char const *sym, uint32 *outcw)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>huff_code_decode_int</name>
      <anchorfile>huff__code_8h.html</anchorfile>
      <anchor>a1eb2eb1261251af7875d022611e3b8d</anchor>
      <arglist>(huff_code_t *hc, int *outval, char const **inout_data, size_t *inout_data_len, int *inout_offset)</arglist>
    </member>
    <member kind="function">
      <type>char const *</type>
      <name>huff_code_decode_str</name>
      <anchorfile>huff__code_8h.html</anchorfile>
      <anchor>cd63ae1d68e8fb50c9bd7b7b6030badd</anchor>
      <arglist>(huff_code_t *hc, char const **inout_data, size_t *inout_data_len, int *inout_offset)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>info.h</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/include/</path>
    <filename>info_8h</filename>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>print_appl_info</name>
      <anchorfile>info_8h.html</anchorfile>
      <anchor>997bdb77d55433471acc38ea58bc34ce</anchor>
      <arglist>(char *appl_name)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>jsgf.h</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/include/</path>
    <filename>jsgf_8h</filename>
    <includes id="hash__table_8h" name="hash_table.h" local="no" imported="no">hash_table.h</includes>
    <includes id="logmath_8h" name="logmath.h" local="no" imported="no">logmath.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>jsgf_rule_iter_next</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>7216bc3a99823fb509e0dd4f8ee02b75</anchor>
      <arglist>(itor)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>jsgf_rule_iter_rule</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>23b17eb0a92ba7e3c4aa086a33e3c5e6</anchor>
      <arglist>(itor)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>jsgf_rule_iter_free</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>697875f60dede64c607180514e4ab2c4</anchor>
      <arglist>(itor)</arglist>
    </member>
    <member kind="typedef">
      <type>struct jsgf_s</type>
      <name>jsgf_t</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>ee85cf9f007eac61cebba97d6aaccaea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct jsgf_rule_s</type>
      <name>jsgf_rule_t</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>3bb0c86e5f9ba2c29b1fa91e1583bf00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hash_iter_t</type>
      <name>jsgf_rule_iter_t</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>c1e450c03748feb7e1db2a487b21c3fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT jsgf_t *</type>
      <name>jsgf_grammar_new</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>504181dfffafe125df5763e4b841b658</anchor>
      <arglist>(jsgf_t *parent)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT jsgf_t *</type>
      <name>jsgf_parse_file</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>c67cab54fdb6ead62a3be79ccffb0836</anchor>
      <arglist>(const char *filename, jsgf_t *parent)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>jsgf_grammar_free</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>8bbbd8834e0248bd8c52252e93c9822b</anchor>
      <arglist>(jsgf_t *jsgf)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT jsgf_rule_iter_t *</type>
      <name>jsgf_rule_iter</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>9617a53c34041e32f0800795aa1341ca</anchor>
      <arglist>(jsgf_t *grammar)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT jsgf_rule_t *</type>
      <name>jsgf_get_rule</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>0329f14f22c4253c975a448dc5e0c3ec</anchor>
      <arglist>(jsgf_t *grammar, char const *name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT char const *</type>
      <name>jsgf_rule_name</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>b1e5791530b5075f76ab085f248e8f0f</anchor>
      <arglist>(jsgf_rule_t *rule)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>jsgf_rule_public</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>85d7895c7a11d82c85b4529f6009c213</anchor>
      <arglist>(jsgf_rule_t *rule)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT fsg_model_t *</type>
      <name>jsgf_build_fsg</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>c355893a25aa071eba6874fae1d51ad2</anchor>
      <arglist>(jsgf_t *grammar, jsgf_rule_t *rule, logmath_t *lmath, float32 lw)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT fsg_model_t *</type>
      <name>jsgf_build_fsg_raw</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>5873c31ddf99379d123c0db2e36600ba</anchor>
      <arglist>(jsgf_t *grammar, jsgf_rule_t *rule, logmath_t *lmath, float32 lw)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>jsgf_write_fsg</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>bc18712a5a7bda442a8afba38f5827e7</anchor>
      <arglist>(jsgf_t *grammar, jsgf_rule_t *rule, FILE *outfh)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>libutil.h</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/include/</path>
    <filename>libutil_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">prim_type.h</includes>
    <includes id="bitvec_8h" name="bitvec.h" local="no" imported="no">bitvec.h</includes>
    <includes id="case_8h" name="case.h" local="no" imported="no">case.h</includes>
    <includes id="ckd__alloc_8h" name="ckd_alloc.h" local="no" imported="no">ckd_alloc.h</includes>
    <includes id="listelem__alloc_8h" name="listelem_alloc.h" local="no" imported="no">listelem_alloc.h</includes>
    <includes id="cmd__ln_8h" name="cmd_ln.h" local="no" imported="no">cmd_ln.h</includes>
    <includes id="err_8h" name="err.h" local="no" imported="no">err.h</includes>
    <includes id="filename_8h" name="filename.h" local="no" imported="no">filename.h</includes>
    <includes id="glist_8h" name="glist.h" local="no" imported="no">glist.h</includes>
    <includes id="hash__table_8h" name="hash_table.h" local="no" imported="no">hash_table.h</includes>
    <includes id="heap_8h" name="heap.h" local="no" imported="no">heap.h</includes>
    <includes id="pio_8h" name="pio.h" local="no" imported="no">pio.h</includes>
    <includes id="profile_8h" name="profile.h" local="no" imported="no">profile.h</includes>
    <includes id="strfuncs_8h" name="strfuncs.h" local="no" imported="no">strfuncs.h</includes>
    <includes id="unlimit_8h" name="unlimit.h" local="no" imported="no">unlimit.h</includes>
    <includes id="info_8h" name="info.h" local="no" imported="no">info.h</includes>
    <includes id="genrand_8h" name="genrand.h" local="no" imported="no">genrand.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>SLEEP_SEC</name>
      <anchorfile>libutil_8h.html</anchorfile>
      <anchor>2bafc2227aa40051b4307afa687dc306</anchor>
      <arglist>(sec)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TRUE</name>
      <anchorfile>libutil_8h.html</anchorfile>
      <anchor>a8cecfc5c5c054d2875c03e77b7be15d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FALSE</name>
      <anchorfile>libutil_8h.html</anchorfile>
      <anchor>a93f0eb578d23995850d61f7d61c55c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_PI</name>
      <anchorfile>libutil_8h.html</anchorfile>
      <anchor>e71449b1cc6e6250b91f539153a7a0d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PI</name>
      <anchorfile>libutil_8h.html</anchorfile>
      <anchor>598a3330b3c21701223ee0ca14316eca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>listelem_alloc.h</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/include/</path>
    <filename>listelem__alloc_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">prim_type.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>listelem_malloc</name>
      <anchorfile>listelem__alloc_8h.html</anchorfile>
      <anchor>d0c40e65d9cca0d7ec08fcf416b09af2</anchor>
      <arglist>(le)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>listelem_free</name>
      <anchorfile>listelem__alloc_8h.html</anchorfile>
      <anchor>67de661d7ca552347fa6f03005e25d74</anchor>
      <arglist>(le, el)</arglist>
    </member>
    <member kind="typedef">
      <type>struct listelem_alloc_s</type>
      <name>listelem_alloc_t</name>
      <anchorfile>listelem__alloc_8h.html</anchorfile>
      <anchor>3fd3950d7834feaa2bbdf84afb98ce32</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT listelem_alloc_t *</type>
      <name>listelem_alloc_init</name>
      <anchorfile>listelem__alloc_8h.html</anchorfile>
      <anchor>4b08b49eaa74cbe9a3c95170cee78de7</anchor>
      <arglist>(size_t elemsize)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>listelem_alloc_free</name>
      <anchorfile>listelem__alloc_8h.html</anchorfile>
      <anchor>94c02e93a0abaa2bd79636cbac6cced2</anchor>
      <arglist>(listelem_alloc_t *le)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>__listelem_malloc__</name>
      <anchorfile>listelem__alloc_8h.html</anchorfile>
      <anchor>04e5512f4dcedc2e84e58108bf61f1ff</anchor>
      <arglist>(listelem_alloc_t *le, char *file, int line)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>__listelem_free__</name>
      <anchorfile>listelem__alloc_8h.html</anchorfile>
      <anchor>b83a7a6fd086c14140ad2c8c4162709b</anchor>
      <arglist>(listelem_alloc_t *le, void *elem, char *file, int line)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>listelem_stats</name>
      <anchorfile>listelem__alloc_8h.html</anchorfile>
      <anchor>838d9361ba76a89a834a7ea6a185b57d</anchor>
      <arglist>(listelem_alloc_t *le)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>logmath.h</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/include/</path>
    <filename>logmath_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">prim_type.h</includes>
    <includes id="cmd__ln_8h" name="cmd_ln.h" local="no" imported="no">cmd_ln.h</includes>
    <class kind="struct">logadd_s</class>
    <member kind="define">
      <type>#define</type>
      <name>LOGMATH_TABLE</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>e5c5ce106e9f8f1e763d419de53317a8</anchor>
      <arglist>(lm)</arglist>
    </member>
    <member kind="typedef">
      <type>struct logadd_s</type>
      <name>logadd_t</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>8c04c94e2c6364f6cf3b649eb4ce5bfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct logmath_s</type>
      <name>logmath_t</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>e613aa7db1dd40ff56a80a7dadb22cc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT logmath_t *</type>
      <name>logmath_init</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>5835860c5f6a703c80c0214f816f0b11</anchor>
      <arglist>(float64 base, int shift, int use_table)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT logmath_t *</type>
      <name>logmath_read</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>fbed298ba0bc4736415d78880fe5c7c2</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>logmath_write</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>787070f5e689878348ef219245fc7c44</anchor>
      <arglist>(logmath_t *lmath, const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>logmath_get_table_shape</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>3280500e77bf27aa7cda23268b8eb8b3</anchor>
      <arglist>(logmath_t *lmath, uint32 *out_size, uint32 *out_width, uint32 *out_shift)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT float64</type>
      <name>logmath_get_base</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>6114206ec0321d7015c42fc7b81cb83e</anchor>
      <arglist>(logmath_t *lmath)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>logmath_get_zero</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>1c160c28a9e7d25923f391773b1028c0</anchor>
      <arglist>(logmath_t *lmath)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>logmath_get_width</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>0cd690d2a414aebb5e126b8cabbfabde</anchor>
      <arglist>(logmath_t *lmath)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>logmath_get_shift</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>ed009aca9736612bebdda57444ec63a6</anchor>
      <arglist>(logmath_t *lmath)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT logmath_t *</type>
      <name>logmath_retain</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>1c1b2ba3b137a39e9e835a8f3e27d381</anchor>
      <arglist>(logmath_t *lmath)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>logmath_free</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>97865ef8bc1e8e2525a2329e0627ecfb</anchor>
      <arglist>(logmath_t *lmath)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>logmath_add_exact</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>61bf79c70a38f00ca060b69b0efd7489</anchor>
      <arglist>(logmath_t *lmath, int logb_p, int logb_q)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>logmath_add</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>5eb70928578b0115c9c7ac2765396a06</anchor>
      <arglist>(logmath_t *lmath, int logb_p, int logb_q)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>logmath_log</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>ebb4711268322fa7aec31e5798fe7e90</anchor>
      <arglist>(logmath_t *lmath, float64 p)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT float64</type>
      <name>logmath_exp</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>e8b0a168e29e448c0d6de66dc46e099e</anchor>
      <arglist>(logmath_t *lmath, int logb_p)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>logmath_ln_to_log</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>52eff2c778ad758888b03ac5efcdccea</anchor>
      <arglist>(logmath_t *lmath, float64 log_p)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT float64</type>
      <name>logmath_log_to_ln</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>8035e176636eae8b4e02fe488f25457a</anchor>
      <arglist>(logmath_t *lmath, int logb_p)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>logmath_log10_to_log</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>acb4dddeed63a61fb927915f7e3a642e</anchor>
      <arglist>(logmath_t *lmath, float64 log_p)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT float64</type>
      <name>logmath_log_to_log10</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>7c17cb624003975e84fbd141ca6e2e06</anchor>
      <arglist>(logmath_t *lmath, int logb_p)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>matrix.h</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/include/</path>
    <filename>matrix_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">prim_type.h</includes>
    <member kind="function">
      <type>SPHINXBASE_EXPORT float64</type>
      <name>determinant</name>
      <anchorfile>matrix_8h.html</anchorfile>
      <anchor>0c810028195f6078c9e99f3b5c29c42b</anchor>
      <arglist>(float32 **a, int32 len)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>invert</name>
      <anchorfile>matrix_8h.html</anchorfile>
      <anchor>a20f437dbe9fcd6f0adda31f181bfbea</anchor>
      <arglist>(float32 **out_ainv, float32 **a, int32 len)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>solve</name>
      <anchorfile>matrix_8h.html</anchorfile>
      <anchor>174a82dac39a15828af6c87edcba3708</anchor>
      <arglist>(float32 **a, float32 *b, float32 *out_x, int32 n)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>outerproduct</name>
      <anchorfile>matrix_8h.html</anchorfile>
      <anchor>a2d31d63ec277fd389d4ef51d3b2bc2b</anchor>
      <arglist>(float32 **out_a, float32 *x, float32 *y, int32 len)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>matrixmultiply</name>
      <anchorfile>matrix_8h.html</anchorfile>
      <anchor>caaf5d2c02d9d12f10abc462ac65cde9</anchor>
      <arglist>(float32 **out_c, float32 **a, float32 **b, int32 n)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>scalarmultiply</name>
      <anchorfile>matrix_8h.html</anchorfile>
      <anchor>dc8ee5f4e4792328e4f33309bc99ebfb</anchor>
      <arglist>(float32 **inout_a, float32 x, int32 n)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>matrixadd</name>
      <anchorfile>matrix_8h.html</anchorfile>
      <anchor>545d251a51cc473bad38a83b2a05f61c</anchor>
      <arglist>(float32 **inout_a, float32 **b, int32 n)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mmio.h</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/include/</path>
    <filename>mmio_8h</filename>
    <member kind="typedef">
      <type>struct mmio_file_s</type>
      <name>mmio_file_t</name>
      <anchorfile>mmio_8h.html</anchorfile>
      <anchor>e27ed04d8142d77aae885c8cb8c9fa3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT mmio_file_t *</type>
      <name>mmio_file_read</name>
      <anchorfile>mmio_8h.html</anchorfile>
      <anchor>e3367a51a50a6108178ecfdd6c983c61</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>mmio_file_ptr</name>
      <anchorfile>mmio_8h.html</anchorfile>
      <anchor>5e6d8bf5cd7785563abc18c70a31ce0d</anchor>
      <arglist>(mmio_file_t *mf)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>mmio_file_unmap</name>
      <anchorfile>mmio_8h.html</anchorfile>
      <anchor>341a9c1cc8a3c4bddfd2d29a1b0993f6</anchor>
      <arglist>(mmio_file_t *mf)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mulaw.h</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/include/</path>
    <filename>mulaw_8h</filename>
  </compound>
  <compound kind="file">
    <name>ngram_model.h</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/include/</path>
    <filename>ngram__model_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">prim_type.h</includes>
    <includes id="cmd__ln_8h" name="cmd_ln.h" local="no" imported="no">cmd_ln.h</includes>
    <includes id="logmath_8h" name="logmath.h" local="no" imported="no">logmath.h</includes>
    <includes id="mmio_8h" name="mmio.h" local="no" imported="no">mmio.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>NGRAM_INVALID_WID</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>3d4b3dddd0ff67e13d30c9bf053d01ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct ngram_model_s</type>
      <name>ngram_model_t</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>faaf0c00e20056d97efcd97e4cae4ea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct ngram_class_s</type>
      <name>ngram_class_t</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>e36b2f037b2ea751dff23f082379c264</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum ngram_file_type_e</type>
      <name>ngram_file_type_t</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>0e7d02703c48237b2afea436392dcb82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum ngram_case_e</type>
      <name>ngram_case_t</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>b9b3023d92b99927d1e851108ac3bdad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct ngram_iter_s</type>
      <name>ngram_iter_t</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>c7de090a02fa12a8bba84abb4d5236aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct ngram_model_set_iter_s</type>
      <name>ngram_model_set_iter_t</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>fffd75c5bde8dd84107449468be48547</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ngram_file_type_e</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>406c0d64c15a9d1749d07c8ab6e0ae74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NGRAM_INVALID</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>406c0d64c15a9d1749d07c8ab6e0ae742cf596c8b0c63a3a0ba1fe33326cc796</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NGRAM_AUTO</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>406c0d64c15a9d1749d07c8ab6e0ae74441701bf8ae0a2b79716feb31b5f257a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NGRAM_ARPA</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>406c0d64c15a9d1749d07c8ab6e0ae7477ef2341d826b3cc8b836e3af1efba99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NGRAM_DMP</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>406c0d64c15a9d1749d07c8ab6e0ae74ddfc3620d0fbc6f05f7f8e455245dd92</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NGRAM_DMP32</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>406c0d64c15a9d1749d07c8ab6e0ae74b8fe83d2dec88c1c8cb4d82a8a528bb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ngram_case_e</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>ad16a0a1edf29ba8c0df43959c0c4771</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_model_t *</type>
      <name>ngram_model_read</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>b0c840f2bdfc38cea08bb70054f76624</anchor>
      <arglist>(cmd_ln_t *config, const char *file_name, ngram_file_type_t file_type, logmath_t *lmath)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>ngram_model_write</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>c8ff04e1bccbef23bde9e81fb61c57fe</anchor>
      <arglist>(ngram_model_t *model, const char *file_name, ngram_file_type_t format)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_file_type_t</type>
      <name>ngram_file_name_to_type</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>d758d3f491d501bdec2ada8088e9b656</anchor>
      <arglist>(const char *file_name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_file_type_t</type>
      <name>ngram_str_to_type</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>ffb3d938049e58c191e72858a7191e9c</anchor>
      <arglist>(const char *str_name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT char const *</type>
      <name>ngram_type_to_str</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>992b8a8d7f623e2662ae94991f6aec55</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_model_t *</type>
      <name>ngram_model_retain</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>046e6ff8cd8787e412400534a9649a81</anchor>
      <arglist>(ngram_model_t *model)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>ngram_model_free</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>ec73d28e7285e539a0b44a7ac0cbe489</anchor>
      <arglist>(ngram_model_t *model)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>ngram_model_recode</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>ac2b3fd054597c2fdfbb59db97d72ec0</anchor>
      <arglist>(ngram_model_t *model, const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>ngram_model_casefold</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>41b938a2c4b129dc0df37b2312d65506</anchor>
      <arglist>(ngram_model_t *model, int kase)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>ngram_model_apply_weights</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a4b8d7c1f3d873b8458c0cfee13af4da</anchor>
      <arglist>(ngram_model_t *model, float32 lw, float32 wip, float32 uw)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT float32</type>
      <name>ngram_model_get_weights</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>30170c1307e065e1f7159a04f75df304</anchor>
      <arglist>(ngram_model_t *model, int32 *out_log_wip, int32 *out_log_uw)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_score</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>9c23d79885af400e17ac2a1b7169660d</anchor>
      <arglist>(ngram_model_t *model, const char *word,...)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_tg_score</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>0f8ad53c1a7cab528113b74aad00f15a</anchor>
      <arglist>(ngram_model_t *model, int32 w3, int32 w2, int32 w1, int32 *n_used)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_bg_score</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>8c06698fbcb0ef82420088ace045ae81</anchor>
      <arglist>(ngram_model_t *model, int32 w2, int32 w1, int32 *n_used)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_ng_score</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>6ac5799e78ea4ad82a11e2439016471e</anchor>
      <arglist>(ngram_model_t *model, int32 wid, int32 *history, int32 n_hist, int32 *n_used)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_prob</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>68cfda3f503e1a4a87f08aa5a3a5ea88</anchor>
      <arglist>(ngram_model_t *model, const char *word,...)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_ng_prob</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>218d8d140b93d3d8008f8933f9e04ec6</anchor>
      <arglist>(ngram_model_t *model, int32 wid, int32 *history, int32 n_hist, int32 *n_used)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_score_to_prob</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>e0cf3a94128927e2be6422d2de34f49b</anchor>
      <arglist>(ngram_model_t *model, int32 score)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_wid</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>d03d4355d4ea659815dc25bce8d83880</anchor>
      <arglist>(ngram_model_t *model, const char *word)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT const char *</type>
      <name>ngram_word</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>96e36290a005c03464ea6c637ccde2f5</anchor>
      <arglist>(ngram_model_t *model, int32 wid)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_unknown_wid</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>1469e9e1c8516a77c9ac1e248a61ef4e</anchor>
      <arglist>(ngram_model_t *model)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_zero</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>e401a87ad55ae64f286dcd83170f7100</anchor>
      <arglist>(ngram_model_t *model)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_model_get_size</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>462d374099a4fe8b3c3195b5e2013545</anchor>
      <arglist>(ngram_model_t *model)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32 const *</type>
      <name>ngram_model_get_counts</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>187531aafc1f11214c9d061f75eae194</anchor>
      <arglist>(ngram_model_t *model)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_iter_t *</type>
      <name>ngram_model_mgrams</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>12683dda2253dc45680102f02fbdb1e2</anchor>
      <arglist>(ngram_model_t *model, int m)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_iter_t *</type>
      <name>ngram_iter</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>d988e0f41447ee404050caf7c7bb7b63</anchor>
      <arglist>(ngram_model_t *model, const char *word,...)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_iter_t *</type>
      <name>ngram_ng_iter</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>461c6e5914ce463422dfeaeee377e024</anchor>
      <arglist>(ngram_model_t *model, int32 wid, int32 *history, int32 n_hist)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32 const *</type>
      <name>ngram_iter_get</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>240c738781daa226a2fc13395dbdb514</anchor>
      <arglist>(ngram_iter_t *itor, int32 *out_score, int32 *out_bowt)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_iter_t *</type>
      <name>ngram_iter_successors</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>e85f41e2defc5b65b12026d29cd4fdaa</anchor>
      <arglist>(ngram_iter_t *itor)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_iter_t *</type>
      <name>ngram_iter_next</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>3a2b285c01393b3ebddaec1fefed11a4</anchor>
      <arglist>(ngram_iter_t *itor)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ngram_iter_free</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>c9f746c8a5db78ef8b2fb7c312be4a22</anchor>
      <arglist>(ngram_iter_t *itor)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_model_add_word</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>38e034d58ee0d6a4c0dd6f852cb71c3c</anchor>
      <arglist>(ngram_model_t *model, const char *word, float32 weight)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_model_read_classdef</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>9b2a86c23543158754373c5456fe890d</anchor>
      <arglist>(ngram_model_t *model, const char *file_name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_model_add_class</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>0481b03a2bf03ef0a197da0a1f7d1caa</anchor>
      <arglist>(ngram_model_t *model, const char *classname, float32 classweight, char **words, const float32 *weights, int32 n_words)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_model_add_class_word</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>39eabb4994cf99c4bc2116e12af0c9f1</anchor>
      <arglist>(ngram_model_t *model, const char *classname, const char *word, float32 weight)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_model_t *</type>
      <name>ngram_model_set_init</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>02310e01a48928e1d430aef0ea3c9a99</anchor>
      <arglist>(cmd_ln_t *config, ngram_model_t **models, char **names, const float32 *weights, int32 n_models)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_model_t *</type>
      <name>ngram_model_set_read</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>fb7b13dbb4a3149b2fa9f7b15dbe35e8</anchor>
      <arglist>(cmd_ln_t *config, const char *lmctlfile, logmath_t *lmath)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_model_set_count</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>22b8f5f49231b4aef3d5a166ea7155b6</anchor>
      <arglist>(ngram_model_t *set)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_model_set_iter_t *</type>
      <name>ngram_model_set_iter</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>880c7768b082a124e1b6f6f1a764b1e3</anchor>
      <arglist>(ngram_model_t *set)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_model_set_iter_t *</type>
      <name>ngram_model_set_iter_next</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>038a174f17632703cffce02611149265</anchor>
      <arglist>(ngram_model_set_iter_t *itor)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ngram_model_set_iter_free</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>e5b58f360ab6432528ffaead1d2b2a2d</anchor>
      <arglist>(ngram_model_set_iter_t *itor)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_model_t *</type>
      <name>ngram_model_set_iter_model</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>438592444037281175150e3cf1543052</anchor>
      <arglist>(ngram_model_set_iter_t *itor, char const **lmname)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_model_t *</type>
      <name>ngram_model_set_select</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>5e7a3fd20d32783ce07b760781f658f8</anchor>
      <arglist>(ngram_model_t *set, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_model_t *</type>
      <name>ngram_model_set_lookup</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>1797a53b95a2a1ca2a6be732918d9fa0</anchor>
      <arglist>(ngram_model_t *set, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT const char *</type>
      <name>ngram_model_set_current</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>95a4da1562cb6d67a01a733bd0bbb436</anchor>
      <arglist>(ngram_model_t *set)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_model_t *</type>
      <name>ngram_model_set_interp</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>8a4c853e77c6b48face3a781480e77d6</anchor>
      <arglist>(ngram_model_t *set, const char **names, const float32 *weights)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_model_t *</type>
      <name>ngram_model_set_add</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>ab34758e97f75733330f3f4cff8a5311</anchor>
      <arglist>(ngram_model_t *set, ngram_model_t *model, const char *name, float32 weight, int reuse_widmap)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_model_t *</type>
      <name>ngram_model_set_remove</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>f761011a07b87c209e6d174e07b34617</anchor>
      <arglist>(ngram_model_t *set, const char *name, int reuse_widmap)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ngram_model_set_map_words</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>3e8abe87ae12cfbe1b79fd99213abe2d</anchor>
      <arglist>(ngram_model_t *set, const char **words, int32 n_words)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_model_set_current_wid</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>f783553aa7527b7544d093aaea74d97a</anchor>
      <arglist>(ngram_model_t *set, int32 set_wid)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_model_set_known_wid</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>d87975912cfe1ac5d0c3ebe12de79209</anchor>
      <arglist>(ngram_model_t *set, int32 set_wid)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ngram_model_flush</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>8304f56d82278824b0a94c254d7235aa</anchor>
      <arglist>(ngram_model_t *lm)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pio.h</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/include/</path>
    <filename>pio_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">prim_type.h</includes>
    <class kind="struct">lineiter_t</class>
    <member kind="define">
      <type>#define</type>
      <name>myfopen</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>96b37e449c7f8698fcfafac1c46cebb2</anchor>
      <arglist>(file, mode)</arglist>
    </member>
    <member kind="typedef">
      <type>struct bit_encode_s</type>
      <name>bit_encode_t</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>e72c3bec19638da72dad3849f75c0cd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT FILE *</type>
      <name>fopen_comp</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>a3d71506049eb49cf03eff1b89ef281f</anchor>
      <arglist>(const char *file, const char *mode, int32 *ispipe)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>fclose_comp</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>87592c3a2d0a00eed9eda014950beb65</anchor>
      <arglist>(FILE *fp, int32 ispipe)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT FILE *</type>
      <name>fopen_compchk</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>ddfd26392f118f811584721b8d4854ce</anchor>
      <arglist>(const char *file, int32 *ispipe)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT FILE *</type>
      <name>_myfopen</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>a22301f25d56be607c9ff45f2c935b14</anchor>
      <arglist>(const char *file, const char *mode, const char *pgm, int32 line)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>fread_retry</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>601277430d3221bf1906bb879ae26d3e</anchor>
      <arglist>(void *pointer, int32 size, int32 num_items, FILE *stream)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT char *</type>
      <name>fread_line</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>11e0daa4f315d01c2e030d3a0abe702c</anchor>
      <arglist>(FILE *stream, size_t *out_len)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT lineiter_t *</type>
      <name>lineiter_start</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>22d0125ab198f02f8bbe543417d99566</anchor>
      <arglist>(FILE *fh)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT lineiter_t *</type>
      <name>lineiter_next</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>ff8df0b6928746d61b3520555263f71e</anchor>
      <arglist>(lineiter_t *li)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>lineiter_free</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>3f80e5d4d666426cef229dd41237d9cf</anchor>
      <arglist>(lineiter_t *li)</arglist>
    </member>
    <member kind="function">
      <type>bit_encode_t *</type>
      <name>bit_encode_attach</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>82e4694a4c13c96550f2410f8c63b1f5</anchor>
      <arglist>(FILE *outfh)</arglist>
    </member>
    <member kind="function">
      <type>bit_encode_t *</type>
      <name>bit_encode_retain</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>da6d9bb75e08493cde00d396dae088f1</anchor>
      <arglist>(bit_encode_t *be)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bit_encode_free</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>8330637520174419771670ed740c9049</anchor>
      <arglist>(bit_encode_t *be)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bit_encode_write</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>59d83bd5850d9ec58175c566d6d48f71</anchor>
      <arglist>(bit_encode_t *be, unsigned char const *bits, int nbits)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bit_encode_write_cw</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>e71dedb663c8e3ae8b91dbfbc95ac420</anchor>
      <arglist>(bit_encode_t *be, uint32 codeword, int nbits)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bit_encode_flush</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>3e818645e567961225977a1923debc3d</anchor>
      <arglist>(bit_encode_t *be)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>stat_retry</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>0ba35509687e80ee65ba731c7cfcad9b</anchor>
      <arglist>(const char *file, struct stat *statbuf)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>stat_mtime</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>289e3a1582ab60563ae0689979992669</anchor>
      <arglist>(const char *file)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>build_directory</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>6df697b8a08cd4d11fe7b864dcb99012</anchor>
      <arglist>(const char *path)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>prim_type.h</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/include/</path>
    <filename>prim__type_8h</filename>
    <class kind="union">anytype_s</class>
    <member kind="define">
      <type>#define</type>
      <name>__BIGSTACKVARIABLE__</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>64d603953ff96570ac4072daaeaeb36b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TRUE</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>a8cecfc5c5c054d2875c03e77b7be15d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FALSE</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>a93f0eb578d23995850d61f7d61c55c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>070d2ce7b6bb7e5c05602aa8c308d0c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_PI</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>e71449b1cc6e6250b91f539153a7a0d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_INT32</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>ac62d87844689a18b6f5339a89ed6e7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_INT16</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>3905e54374e49708219791e7d59c60fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_INT8</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>a092b7d509790c28edc065b23de6e39e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_NEG_INT32</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>29962133c3b9c5c2cf72f7d9299fd4a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_NEG_INT16</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>4338527c828e68762d8b40e01f0e0869</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_NEG_INT8</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>76a3e608c93aff0ad98b3b742c51d38f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_UINT32</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>26248174abf27973b9edfa9b70ba4c93</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_UINT16</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>bc023544d8096a8fa1bd1f6f6f90bc41</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_UINT8</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>05682ca8de174141447ff05a2289a27c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_POS_FLOAT32</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>763737bb762908f1014777705e1bd5e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN_POS_FLOAT32</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>6ebe6d883694f66620b6d2dd94dc38e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_POS_FLOAT64</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>63f40e6ca19e802259413c04cc56bd28</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN_POS_FLOAT64</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>2fc3595771a7d0f944470fd9ba07cfad</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_IEEE_NORM_POS_FLOAT32</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>b806e0c70417e38f2302635bbb78c8c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN_IEEE_NORM_POS_FLOAT32</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>8b4a04ec8b6561c6f831dfd2434fd505</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN_IEEE_NORM_NEG_FLOAT32</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>7dcce0312b93eb66d4e662fd035560bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_IEEE_NORM_POS_FLOAT64</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>424bb3e6f9a39ec4d9f0ed965ab92026</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN_IEEE_NORM_POS_FLOAT64</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>a8adb129a54c32e19ba7cc9171779687</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN_IEEE_NORM_NEG_FLOAT64</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>d8550cd6490d48fd6f4949626084fbdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_NEG_FLOAT32</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>28dec1bda2ada96d7126ef83feae2845</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN_NEG_FLOAT32</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>98d8dffc8bc9036591980531b57e7f19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_NEG_FLOAT64</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>cb6f44b9148976581d01ab2e1313c635</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN_NEG_FLOAT64</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>2e65d00cc854972aae6f58d9cb7d383f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>union anytype_s</type>
      <name>anytype_t</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>98bfefef272895ed1506502cdb8c1aa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>int32</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>56f1a81c92849566ae864511088eb7e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>int16</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>4355d16fcf9f644c9ac84293f0b1801f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signed char</type>
      <name>int8</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>1b956fe1df85f3c132b21edb4e116458</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>uint32</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>1134b580f8da4de94ca6b1de4d37975e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>uint16</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>05f6b0ae8f6a6e135b0e290c25fe0e4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>uint8</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>dde6aaee8457bee49c2a92621fe22b79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>float32</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>acdc525d6f7bddb3ae95d5c311bd06a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>float64</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>232fad1b0d6dcc7c16aabde98b2e2a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>int64</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>5ca2adc31be9c44adfeb373feb166821</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>uint64</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>521337cd39452f9e318a6a3c3f6694ca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>profile.h</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/include/</path>
    <filename>profile_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">prim_type.h</includes>
    <class kind="struct">pctr_t</class>
    <class kind="struct">ptmr_t</class>
    <member kind="function">
      <type>SPHINXBASE_EXPORT pctr_t *</type>
      <name>pctr_new</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>cc5bd9ca1cc61377433a308b082d34b8</anchor>
      <arglist>(char *name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>pctr_reset</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>7d072965099f09c49a58e3fd422c48f4</anchor>
      <arglist>(pctr_t *ctr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>pctr_print</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>4333e06af6db1fd806846c9f9b1f3f78</anchor>
      <arglist>(FILE *fp, pctr_t *ctr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>pctr_increment</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>29e1c5d5f5b462d24a84204e532943fa</anchor>
      <arglist>(pctr_t *ctr, int32 inc)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>pctr_free</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>90821b8f5c4593ead9f8ebea8ca6994c</anchor>
      <arglist>(pctr_t *ctr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ptmr_start</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>ada447eb3dc8c9ffb17fd7331ae671e7</anchor>
      <arglist>(ptmr_t *tmr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ptmr_stop</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>de42334cf2db0bc8858ff966e55a4ffb</anchor>
      <arglist>(ptmr_t *tmr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ptmr_reset</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>32b1bf9f877946fb455c493a6aa3613f</anchor>
      <arglist>(ptmr_t *tmr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ptmr_init</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>5260d9143ed28fa82c2ab410abce6749</anchor>
      <arglist>(ptmr_t *tmr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ptmr_reset_all</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>0aaa0953b76ae8c9947d6d982bbbd4a7</anchor>
      <arglist>(ptmr_t *tmr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ptmr_print_all</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>08a625009ff1a5e2ee8aa02b53009f66</anchor>
      <arglist>(FILE *fp, ptmr_t *tmr, float64 norm)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>host_pclk</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>4315a0c6da4e9d3ef3c0ce264620ce28</anchor>
      <arglist>(int32 dummy)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>host_endian</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>a23a14aa8ae716d64e632d61b1c2ed77</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sbthread.h</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/include/</path>
    <filename>sbthread_8h</filename>
    <includes id="cmd__ln_8h" name="cmd_ln.h" local="no" imported="no">cmd_ln.h</includes>
    <member kind="typedef">
      <type>struct sbthread_s</type>
      <name>sbthread_t</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>068f6028c760eee1e4eb4655ac7e7424</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct sbmsgq_s</type>
      <name>sbmsgq_t</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>ad7adcc2e5f2fd6d2f429c25a52356ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct sbmtx_s</type>
      <name>sbmtx_t</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>21bc1100c4336693a6f25cdeec40cbec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct sbevent_s</type>
      <name>sbevent_t</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>312dae368aa1662b07f199ea802cdefa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int(*</type>
      <name>sbthread_main</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>cb30b2ddcf70058f8bd38d68920be777</anchor>
      <arglist>)(sbthread_t *th)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT sbthread_t *</type>
      <name>sbthread_start</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>bfe1f703f4e17a2940c88d86d1987a8f</anchor>
      <arglist>(cmd_ln_t *config, sbthread_main func, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>sbthread_wait</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>09c5c428b02b743c99d20bb2b11d964b</anchor>
      <arglist>(sbthread_t *th)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>sbthread_free</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>a7827b760dfa47d95141f4896698e5c5</anchor>
      <arglist>(sbthread_t *th)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT cmd_ln_t *</type>
      <name>sbthread_config</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>b03c2f299f3e94b9f53aac1c1eaa0695</anchor>
      <arglist>(sbthread_t *th)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>sbthread_arg</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>130f2273128498e0f1d875cf6c0c2928</anchor>
      <arglist>(sbthread_t *th)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT sbmsgq_t *</type>
      <name>sbthread_msgq</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>5dfe1b7bb9c8d9aea7339e99a89307af</anchor>
      <arglist>(sbthread_t *th)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>sbthread_send</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>932830409403ab4a03f0ffefe907551e</anchor>
      <arglist>(sbthread_t *th, size_t len, void const *data)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT sbmsgq_t *</type>
      <name>sbmsgq_init</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>535a4d0d3f71c30f32d75b6268cc5e1e</anchor>
      <arglist>(size_t depth)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>sbmsgq_free</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>b1ab59934422a5fac90ce0c4b66ffcc8</anchor>
      <arglist>(sbmsgq_t *q)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>sbmsgq_send</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>b0591b5cb626be52dd22edf8fa13a3e3</anchor>
      <arglist>(sbmsgq_t *q, size_t len, void const *data)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>sbmsgq_wait</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>b3a421d172a92ef5ad371442a66767b5</anchor>
      <arglist>(sbmsgq_t *q, size_t *out_len, int sec, int nsec)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT sbmtx_t *</type>
      <name>sbmtx_init</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>28067c5be5370074d21668620a68b229</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>sbmtx_trylock</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>3b86c81160360234944737b4eab73125</anchor>
      <arglist>(sbmtx_t *mtx)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>sbmtx_lock</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>6615e839f7c8ef3ebb6b288525f002cd</anchor>
      <arglist>(sbmtx_t *mtx)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>sbmtx_unlock</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>f65691258c916c68f1b5d000aaea233f</anchor>
      <arglist>(sbmtx_t *mtx)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>sbmtx_free</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>a17a6a93744eb813ca80bf098c69bdba</anchor>
      <arglist>(sbmtx_t *mtx)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT sbevent_t *</type>
      <name>sbevent_init</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>1b3fa1cf6b82dcd82ab8d4124ab12490</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>sbevent_free</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>fe8253a0e804a019ad0d8c540eec75af</anchor>
      <arglist>(sbevent_t *evt)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>sbevent_signal</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>7c01e3e70c2ab8e961d59db84aa5fa68</anchor>
      <arglist>(sbevent_t *evt)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>sbevent_wait</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>c211760e4dffccf0102db65fb6f2c5b3</anchor>
      <arglist>(sbevent_t *evt, int sec, int nsec)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>strfuncs.h</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/include/</path>
    <filename>strfuncs_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">prim_type.h</includes>
    <member kind="enumeration">
      <name>string_edge_e</name>
      <anchorfile>strfuncs_8h.html</anchorfile>
      <anchor>b5c9ca15770a4bd3047705762b815df9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STRING_START</name>
      <anchorfile>strfuncs_8h.html</anchorfile>
      <anchor>b5c9ca15770a4bd3047705762b815df95e4d73e6ca445be10fa48351b9571125</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STRING_END</name>
      <anchorfile>strfuncs_8h.html</anchorfile>
      <anchor>b5c9ca15770a4bd3047705762b815df911f31598e50bf3cf1d0aa97d967bb9b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STRING_BOTH</name>
      <anchorfile>strfuncs_8h.html</anchorfile>
      <anchor>b5c9ca15770a4bd3047705762b815df94fcbb0fe16fa4aa48723ba3ba10c26dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT char *</type>
      <name>string_join</name>
      <anchorfile>strfuncs_8h.html</anchorfile>
      <anchor>317522f23d291311e366de34ef86b777</anchor>
      <arglist>(const char *base,...)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT char *</type>
      <name>string_trim</name>
      <anchorfile>strfuncs_8h.html</anchorfile>
      <anchor>c36a095632a4f16cf4e0fbcdb01de5ad</anchor>
      <arglist>(char *string, enum string_edge_e which)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT double</type>
      <name>atof_c</name>
      <anchorfile>strfuncs_8h.html</anchorfile>
      <anchor>b708351fe7308551632a782bfad75a1e</anchor>
      <arglist>(char const *str)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT uint32</type>
      <name>utf8_decode</name>
      <anchorfile>strfuncs_8h.html</anchorfile>
      <anchor>ab1bdad6b50285de4b7cd042f67314dd</anchor>
      <arglist>(uint32 *state, uint32 *codep, uint32 *byte)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>str2words</name>
      <anchorfile>strfuncs_8h.html</anchorfile>
      <anchor>5b520fdebcca599db86faaf75a82173f</anchor>
      <arglist>(char *line, char **wptr, int32 n_wptr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>nextword</name>
      <anchorfile>strfuncs_8h.html</anchorfile>
      <anchor>41d9a59e4326b545bf1282401319f553</anchor>
      <arglist>(char *line, const char *delim, char **word, char *delimfound)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>unlimit.h</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/include/</path>
    <filename>unlimit_8h</filename>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>unlimit</name>
      <anchorfile>unlimit_8h.html</anchorfile>
      <anchor>0b8bf51305f48eb78ff53ebb8ad27248</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>yin.h</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/include/</path>
    <filename>yin_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">prim_type.h</includes>
    <member kind="typedef">
      <type>struct yin_s</type>
      <name>yin_t</name>
      <anchorfile>yin_8h.html</anchorfile>
      <anchor>69a22f00f601c099b232e01b94704c2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>yin_t *</type>
      <name>yin_init</name>
      <anchorfile>yin_8h.html</anchorfile>
      <anchor>deaf7df902787daf9fa9d7453798c01e</anchor>
      <arglist>(int frame_size, float search_threshold, float search_range, int smooth_window)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yin_free</name>
      <anchorfile>yin_8h.html</anchorfile>
      <anchor>98f2ed13316b8ab9bf93feb4b6d3e7bd</anchor>
      <arglist>(yin_t *pe)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yin_start</name>
      <anchorfile>yin_8h.html</anchorfile>
      <anchor>edb765d2c9f8f9d96f90b4971ed0f649</anchor>
      <arglist>(yin_t *pe)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yin_end</name>
      <anchorfile>yin_8h.html</anchorfile>
      <anchor>bfe51d8b596f85941831b2727e49c181</anchor>
      <arglist>(yin_t *pe)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yin_write</name>
      <anchorfile>yin_8h.html</anchorfile>
      <anchor>e272b1d9ce8ad45f69eb8b5f98f305b6</anchor>
      <arglist>(yin_t *pe, int16 const *frame)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>yin_read</name>
      <anchorfile>yin_8h.html</anchorfile>
      <anchor>5d4ceba1aed1fcc8e10f6408a271b294</anchor>
      <arglist>(yin_t *pe, uint16 *out_period, uint16 *out_bestdiff)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>audio_utils_sunos.h</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/src/libsphinxad/</path>
    <filename>audio__utils__sunos_8h</filename>
    <member kind="function">
      <type>int</type>
      <name>audioOpen</name>
      <anchorfile>audio__utils__sunos_8h.html</anchorfile>
      <anchor>1c2f842b06424256d46dc930b2df2ac7</anchor>
      <arglist>(const char *dev, int rate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>audioPause</name>
      <anchorfile>audio__utils__sunos_8h.html</anchorfile>
      <anchor>3c36756e01944a21cd116f845a0192f9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>audioFlush</name>
      <anchorfile>audio__utils__sunos_8h.html</anchorfile>
      <anchor>3b8ff906e10285a64c1f78ba160a2349</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>audioStartRecord</name>
      <anchorfile>audio__utils__sunos_8h.html</anchorfile>
      <anchor>7a3b2fb58ef7fa179bceb737335465ec</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>audioStopRecord</name>
      <anchorfile>audio__utils__sunos_8h.html</anchorfile>
      <anchor>c3350f3f057e4cba5669ad8b0723a500</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>audioClose</name>
      <anchorfile>audio__utils__sunos_8h.html</anchorfile>
      <anchor>2ddd50c6ba6bcc4c63132cf1dab6b644</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>audioSetRecordGain</name>
      <anchorfile>audio__utils__sunos_8h.html</anchorfile>
      <anchor>aa8bb7d093daf454ef50074ba639142c</anchor>
      <arglist>(int gain)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>yin.c</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/src/libsphinxbase/fe/</path>
    <filename>yin_8c</filename>
    <includes id="yin_8h" name="yin.h" local="yes" imported="no">yin.h</includes>
    <includes id="prim__type_8h" name="prim_type.h" local="yes" imported="no">prim_type.h</includes>
    <includes id="ckd__alloc_8h" name="ckd_alloc.h" local="yes" imported="no">ckd_alloc.h</includes>
    <class kind="struct">yin_s</class>
    <member kind="function">
      <type>yin_t *</type>
      <name>yin_init</name>
      <anchorfile>yin_8c.html</anchorfile>
      <anchor>deaf7df902787daf9fa9d7453798c01e</anchor>
      <arglist>(int frame_size, float search_threshold, float search_range, int smooth_window)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yin_free</name>
      <anchorfile>yin_8c.html</anchorfile>
      <anchor>98f2ed13316b8ab9bf93feb4b6d3e7bd</anchor>
      <arglist>(yin_t *pe)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yin_start</name>
      <anchorfile>yin_8c.html</anchorfile>
      <anchor>edb765d2c9f8f9d96f90b4971ed0f649</anchor>
      <arglist>(yin_t *pe)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yin_end</name>
      <anchorfile>yin_8c.html</anchorfile>
      <anchor>bfe51d8b596f85941831b2727e49c181</anchor>
      <arglist>(yin_t *pe)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>thresholded_search</name>
      <anchorfile>yin_8c.html</anchorfile>
      <anchor>3befedc0027bb60c5c4b571a6a5c2e03</anchor>
      <arglist>(int32 *diff_window, fixed32 threshold, int start, int end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yin_write</name>
      <anchorfile>yin_8c.html</anchorfile>
      <anchor>e272b1d9ce8ad45f69eb8b5f98f305b6</anchor>
      <arglist>(yin_t *pe, int16 const *frame)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>yin_read</name>
      <anchorfile>yin_8c.html</anchorfile>
      <anchor>5d4ceba1aed1fcc8e10f6408a271b294</anchor>
      <arglist>(yin_t *pe, uint16 *out_period, uint16 *out_bestdiff)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>jsgf.c</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/src/libsphinxbase/lm/</path>
    <filename>jsgf_8c</filename>
    <includes id="ckd__alloc_8h" name="ckd_alloc.h" local="yes" imported="no">ckd_alloc.h</includes>
    <includes id="strfuncs_8h" name="strfuncs.h" local="yes" imported="no">strfuncs.h</includes>
    <includes id="hash__table_8h" name="hash_table.h" local="yes" imported="no">hash_table.h</includes>
    <includes id="err_8h" name="err.h" local="yes" imported="no">err.h</includes>
    <includes id="jsgf__internal_8h" name="jsgf_internal.h" local="yes" imported="no">jsgf_internal.h</includes>
    <member kind="function">
      <type>int</type>
      <name>yyparse</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>75c2c883229f33d81c1a9531e6e75f16</anchor>
      <arglist>(yyscan_t yyscanner, jsgf_t *jsgf)</arglist>
    </member>
    <member kind="function">
      <type>jsgf_atom_t *</type>
      <name>jsgf_atom_new</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>0e59b63784fa8761358bb2bdf568bec1</anchor>
      <arglist>(char *name, float weight)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>jsgf_atom_free</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>289d683bf62d1a5aaac6917fa64f54f2</anchor>
      <arglist>(jsgf_atom_t *atom)</arglist>
    </member>
    <member kind="function">
      <type>jsgf_t *</type>
      <name>jsgf_grammar_new</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>2f4a4ef97090210de6c73361de1d9561</anchor>
      <arglist>(jsgf_t *parent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jsgf_grammar_free</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>0a5185af0b0f1c19d85ae553c5ecc51b</anchor>
      <arglist>(jsgf_t *jsgf)</arglist>
    </member>
    <member kind="function">
      <type>jsgf_atom_t *</type>
      <name>jsgf_kleene_new</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>b9dc2ab39224cda76c43822150cf7e67</anchor>
      <arglist>(jsgf_t *jsgf, jsgf_atom_t *atom, int plus)</arglist>
    </member>
    <member kind="function">
      <type>jsgf_rule_t *</type>
      <name>jsgf_optional_new</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>4a07cb0721add8783f0ea24dfacd6c0f</anchor>
      <arglist>(jsgf_t *jsgf, jsgf_rhs_t *exp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jsgf_add_link</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>cb5af4a04abc56a8584eba9b937f8154</anchor>
      <arglist>(jsgf_t *grammar, jsgf_atom_t *atom, int from, int to)</arglist>
    </member>
    <member kind="function">
      <type>jsgf_rule_iter_t *</type>
      <name>jsgf_rule_iter</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>fd426d7e3799f54b4d5c0acff7684233</anchor>
      <arglist>(jsgf_t *grammar)</arglist>
    </member>
    <member kind="function">
      <type>jsgf_rule_t *</type>
      <name>jsgf_get_rule</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>18fc91b6b6e79fb183147502df372b5e</anchor>
      <arglist>(jsgf_t *grammar, char const *name)</arglist>
    </member>
    <member kind="function">
      <type>char const *</type>
      <name>jsgf_rule_name</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>94a20b28b8bb3a179e567caec972d002</anchor>
      <arglist>(jsgf_rule_t *rule)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>jsgf_rule_public</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>49d5d9f6c1edda3bb087545ecfa21809</anchor>
      <arglist>(jsgf_rule_t *rule)</arglist>
    </member>
    <member kind="function">
      <type>fsg_model_t *</type>
      <name>jsgf_build_fsg</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>2a3f3ade56bed13c58059a6ede5fd1dc</anchor>
      <arglist>(jsgf_t *grammar, jsgf_rule_t *rule, logmath_t *lmath, float32 lw)</arglist>
    </member>
    <member kind="function">
      <type>fsg_model_t *</type>
      <name>jsgf_build_fsg_raw</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>68e2c50712a3d1da5d9d6cb25a7198ee</anchor>
      <arglist>(jsgf_t *grammar, jsgf_rule_t *rule, logmath_t *lmath, float32 lw)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>jsgf_write_fsg</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>b9454daf3cdf0c857b0f4780b600632c</anchor>
      <arglist>(jsgf_t *grammar, jsgf_rule_t *rule, FILE *outfh)</arglist>
    </member>
    <member kind="function">
      <type>jsgf_rule_t *</type>
      <name>jsgf_define_rule</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>91539f6bf30f85af4b90b5a85598f53f</anchor>
      <arglist>(jsgf_t *jsgf, char *name, jsgf_rhs_t *rhs, int public)</arglist>
    </member>
    <member kind="function">
      <type>jsgf_rule_t *</type>
      <name>jsgf_rule_retain</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>d152a23eb0f0d9af8417919fc93074fd</anchor>
      <arglist>(jsgf_rule_t *rule)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>jsgf_rule_free</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>f2faf6fb74ad1e4d43cf990c1bcec672</anchor>
      <arglist>(jsgf_rule_t *rule)</arglist>
    </member>
    <member kind="function">
      <type>jsgf_rule_t *</type>
      <name>jsgf_import_rule</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>fe1e47584e4dd80929552ffed77373f2</anchor>
      <arglist>(jsgf_t *jsgf, char *name)</arglist>
    </member>
    <member kind="function">
      <type>jsgf_t *</type>
      <name>jsgf_parse_file</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>322da18b1c115f1b3a1b7c766cf9e778</anchor>
      <arglist>(const char *filename, jsgf_t *parent)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>jsgf_internal.h</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/src/libsphinxbase/lm/</path>
    <filename>jsgf__internal_8h</filename>
    <includes id="hash__table_8h" name="hash_table.h" local="no" imported="no">hash_table.h</includes>
    <includes id="glist_8h" name="glist.h" local="no" imported="no">glist.h</includes>
    <includes id="logmath_8h" name="logmath.h" local="no" imported="no">logmath.h</includes>
    <includes id="strfuncs_8h" name="strfuncs.h" local="no" imported="no">strfuncs.h</includes>
    <includes id="jsgf_8h" name="jsgf.h" local="no" imported="no">jsgf.h</includes>
    <class kind="struct">jsgf_s</class>
    <class kind="struct">jsgf_rule_s</class>
    <class kind="struct">jsgf_rhs_s</class>
    <class kind="struct">jsgf_atom_s</class>
    <class kind="struct">jsgf_link_s</class>
    <member kind="define">
      <type>#define</type>
      <name>YY_NO_UNISTD_H</name>
      <anchorfile>jsgf__internal_8h.html</anchorfile>
      <anchor>e78ac56cd1f29572e967ed7636952d15</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_NO_INPUT</name>
      <anchorfile>jsgf__internal_8h.html</anchorfile>
      <anchor>85523a0c7d95c059d251b4e9829947aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>jsgf_atom_is_rule</name>
      <anchorfile>jsgf__internal_8h.html</anchorfile>
      <anchor>c4452bbb59863e64d73f4fe2d6cd394f</anchor>
      <arglist>(atom)</arglist>
    </member>
    <member kind="typedef">
      <type>struct jsgf_rhs_s</type>
      <name>jsgf_rhs_t</name>
      <anchorfile>jsgf__internal_8h.html</anchorfile>
      <anchor>d8fc00ae94c7a558005de3e89c35142f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct jsgf_atom_s</type>
      <name>jsgf_atom_t</name>
      <anchorfile>jsgf__internal_8h.html</anchorfile>
      <anchor>439a04913bdb6a58d86ad152b952f0ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct jsgf_link_s</type>
      <name>jsgf_link_t</name>
      <anchorfile>jsgf__internal_8h.html</anchorfile>
      <anchor>5b84ef71c936d856751f19992a7245eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jsgf_add_link</name>
      <anchorfile>jsgf__internal_8h.html</anchorfile>
      <anchor>cb5af4a04abc56a8584eba9b937f8154</anchor>
      <arglist>(jsgf_t *grammar, jsgf_atom_t *atom, int from, int to)</arglist>
    </member>
    <member kind="function">
      <type>jsgf_atom_t *</type>
      <name>jsgf_atom_new</name>
      <anchorfile>jsgf__internal_8h.html</anchorfile>
      <anchor>0e59b63784fa8761358bb2bdf568bec1</anchor>
      <arglist>(char *name, float weight)</arglist>
    </member>
    <member kind="function">
      <type>jsgf_atom_t *</type>
      <name>jsgf_kleene_new</name>
      <anchorfile>jsgf__internal_8h.html</anchorfile>
      <anchor>b9dc2ab39224cda76c43822150cf7e67</anchor>
      <arglist>(jsgf_t *jsgf, jsgf_atom_t *atom, int plus)</arglist>
    </member>
    <member kind="function">
      <type>jsgf_rule_t *</type>
      <name>jsgf_optional_new</name>
      <anchorfile>jsgf__internal_8h.html</anchorfile>
      <anchor>4a07cb0721add8783f0ea24dfacd6c0f</anchor>
      <arglist>(jsgf_t *jsgf, jsgf_rhs_t *exp)</arglist>
    </member>
    <member kind="function">
      <type>jsgf_rule_t *</type>
      <name>jsgf_define_rule</name>
      <anchorfile>jsgf__internal_8h.html</anchorfile>
      <anchor>91539f6bf30f85af4b90b5a85598f53f</anchor>
      <arglist>(jsgf_t *jsgf, char *name, jsgf_rhs_t *rhs, int public)</arglist>
    </member>
    <member kind="function">
      <type>jsgf_rule_t *</type>
      <name>jsgf_import_rule</name>
      <anchorfile>jsgf__internal_8h.html</anchorfile>
      <anchor>fe1e47584e4dd80929552ffed77373f2</anchor>
      <arglist>(jsgf_t *jsgf, char *name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>jsgf_atom_free</name>
      <anchorfile>jsgf__internal_8h.html</anchorfile>
      <anchor>289d683bf62d1a5aaac6917fa64f54f2</anchor>
      <arglist>(jsgf_atom_t *atom)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>jsgf_rule_free</name>
      <anchorfile>jsgf__internal_8h.html</anchorfile>
      <anchor>f2faf6fb74ad1e4d43cf990c1bcec672</anchor>
      <arglist>(jsgf_rule_t *rule)</arglist>
    </member>
    <member kind="function">
      <type>jsgf_rule_t *</type>
      <name>jsgf_rule_retain</name>
      <anchorfile>jsgf__internal_8h.html</anchorfile>
      <anchor>d152a23eb0f0d9af8417919fc93074fd</anchor>
      <arglist>(jsgf_rule_t *rule)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ngram_model_set.c</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/src/libsphinxbase/lm/</path>
    <filename>ngram__model__set_8c</filename>
    <includes id="ngram__model__set_8h" name="ngram_model_set.h" local="yes" imported="no">ngram_model_set.h</includes>
    <includes id="err_8h" name="err.h" local="no" imported="no">err.h</includes>
    <includes id="ckd__alloc_8h" name="ckd_alloc.h" local="no" imported="no">ckd_alloc.h</includes>
    <includes id="strfuncs_8h" name="strfuncs.h" local="no" imported="no">strfuncs.h</includes>
    <includes id="filename_8h" name="filename.h" local="no" imported="no">filename.h</includes>
    <member kind="function">
      <type>ngram_model_t *</type>
      <name>ngram_model_set_init</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>a4cc619035ac8091759c07d6a3b2fb7c</anchor>
      <arglist>(cmd_ln_t *config, ngram_model_t **models, char **names, const float32 *weights, int32 n_models)</arglist>
    </member>
    <member kind="function">
      <type>ngram_model_t *</type>
      <name>ngram_model_set_read</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>1389a90bf32110fd7e56a73b6d39fa07</anchor>
      <arglist>(cmd_ln_t *config, const char *lmctlfile, logmath_t *lmath)</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>ngram_model_set_count</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>fa38d4e0f6cd64cc2875000fcef487f0</anchor>
      <arglist>(ngram_model_t *base)</arglist>
    </member>
    <member kind="function">
      <type>ngram_model_set_iter_t *</type>
      <name>ngram_model_set_iter</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>5a1593344017a1210569beb63e4089d3</anchor>
      <arglist>(ngram_model_t *base)</arglist>
    </member>
    <member kind="function">
      <type>ngram_model_set_iter_t *</type>
      <name>ngram_model_set_iter_next</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>13893e41e56962f6f237aa1305337b7a</anchor>
      <arglist>(ngram_model_set_iter_t *itor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ngram_model_set_iter_free</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>532787b5b709d0c5f0ad57e3df0d1d73</anchor>
      <arglist>(ngram_model_set_iter_t *itor)</arglist>
    </member>
    <member kind="function">
      <type>ngram_model_t *</type>
      <name>ngram_model_set_iter_model</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>bec0455e59945b910d86c2f825ab0894</anchor>
      <arglist>(ngram_model_set_iter_t *itor, char const **lmname)</arglist>
    </member>
    <member kind="function">
      <type>ngram_model_t *</type>
      <name>ngram_model_set_lookup</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>3e06e5d47a9c35186644cc1310924630</anchor>
      <arglist>(ngram_model_t *base, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>ngram_model_t *</type>
      <name>ngram_model_set_select</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>2cbeda856dd655c80f8dc6ba91f5d20b</anchor>
      <arglist>(ngram_model_t *base, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ngram_model_set_current</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>3a4f2bb40d10e9420e6291e2706b6865</anchor>
      <arglist>(ngram_model_t *base)</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>ngram_model_set_current_wid</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>a6239b58f333177839a15de79bae6146</anchor>
      <arglist>(ngram_model_t *base, int32 set_wid)</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>ngram_model_set_known_wid</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>f30197146b9b2d6c143914240dee3c04</anchor>
      <arglist>(ngram_model_t *base, int32 set_wid)</arglist>
    </member>
    <member kind="function">
      <type>ngram_model_t *</type>
      <name>ngram_model_set_interp</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>3a926714c60e2b8308d4c88d11d17d7e</anchor>
      <arglist>(ngram_model_t *base, const char **names, const float32 *weights)</arglist>
    </member>
    <member kind="function">
      <type>ngram_model_t *</type>
      <name>ngram_model_set_add</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>53071575bca9465361740c809666349d</anchor>
      <arglist>(ngram_model_t *base, ngram_model_t *model, const char *name, float32 weight, int reuse_widmap)</arglist>
    </member>
    <member kind="function">
      <type>ngram_model_t *</type>
      <name>ngram_model_set_remove</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>1fadaf8cdc6799869b74a39a8652a7e0</anchor>
      <arglist>(ngram_model_t *base, const char *name, int reuse_widmap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ngram_model_set_map_words</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>f3ac3bbec3eed0b9638c4e64c8b75949</anchor>
      <arglist>(ngram_model_t *base, const char **words, int32 n_words)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ngram_model_set.h</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/src/libsphinxbase/lm/</path>
    <filename>ngram__model__set_8h</filename>
    <class kind="struct">ngram_model_set_s</class>
    <class kind="struct">ngram_model_set_iter_s</class>
    <member kind="typedef">
      <type>struct ngram_model_set_s</type>
      <name>ngram_model_set_t</name>
      <anchorfile>ngram__model__set_8h.html</anchorfile>
      <anchor>f89b4060ed18e3f4e3ac0490a09d5745</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>err.c</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/src/libsphinxbase/util/</path>
    <filename>err_8c</filename>
    <includes id="err_8h" name="err.h" local="yes" imported="no">err.h</includes>
    <member kind="function">
      <type>int</type>
      <name>err_set_debug_level</name>
      <anchorfile>err_8c.html</anchorfile>
      <anchor>c7956e03cd685da5fe6e134c462f73e1</anchor>
      <arglist>(int level)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>err_get_debug_level</name>
      <anchorfile>err_8c.html</anchorfile>
      <anchor>393ad2383651d1fed0223c92208a6631</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>FILE *</type>
      <name>err_get_logfp</name>
      <anchorfile>err_8c.html</anchorfile>
      <anchor>e32e95118a1273e1e99584f2c555231a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>FILE *</type>
      <name>err_set_logfp</name>
      <anchorfile>err_8c.html</anchorfile>
      <anchor>60adc1968822a513d4111963b3eddd79</anchor>
      <arglist>(FILE *newfp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>err_set_logfile</name>
      <anchorfile>err_8c.html</anchorfile>
      <anchor>aa2d9e5fcb8d7b80d941ba6374762ebe</anchor>
      <arglist>(char const *file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_E__pr_info_header_wofn</name>
      <anchorfile>err_8c.html</anchorfile>
      <anchor>fd2e78db5fc2b29d87b434d0a2d0d07e</anchor>
      <arglist>(char const *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_E__pr_header</name>
      <anchorfile>err_8c.html</anchorfile>
      <anchor>5ff468fc371d3fd651257df3819e412a</anchor>
      <arglist>(char const *f, long ln, char const *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_E__pr_info_header</name>
      <anchorfile>err_8c.html</anchorfile>
      <anchor>f0a195f2b0f1f9fc2ef7d60593b66faa</anchor>
      <arglist>(char const *f, long ln, char const *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_E__pr_warn</name>
      <anchorfile>err_8c.html</anchorfile>
      <anchor>8cdfd1775cf364e5705bb00a262c7865</anchor>
      <arglist>(char const *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_E__pr_info</name>
      <anchorfile>err_8c.html</anchorfile>
      <anchor>d90268a25147c7485c0b41b1b12783e4</anchor>
      <arglist>(char const *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_E__die_error</name>
      <anchorfile>err_8c.html</anchorfile>
      <anchor>d6271835d1ac95bf7d04cf30a148fb79</anchor>
      <arglist>(char const *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_E__fatal_sys_error</name>
      <anchorfile>err_8c.html</anchorfile>
      <anchor>dd44119b26798320a43e2eaee0f71a15</anchor>
      <arglist>(char const *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_E__sys_error</name>
      <anchorfile>err_8c.html</anchorfile>
      <anchor>9b5c6b51090d5a2aaedf1ab8e43e8f5c</anchor>
      <arglist>(char const *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_E__abort_error</name>
      <anchorfile>err_8c.html</anchorfile>
      <anchor>28cf0aaaf44493d5a78dec076d227df4</anchor>
      <arglist>(char const *fmt,...)</arglist>
    </member>
    <member kind="variable">
      <type>FILE *</type>
      <name>logfp</name>
      <anchorfile>err_8c.html</anchorfile>
      <anchor>c16dab5cefce6fed135c20d1bae372a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sbthread.c</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/src/libsphinxbase/util/</path>
    <filename>sbthread_8c</filename>
    <includes id="sbthread_8h" name="sbthread.h" local="yes" imported="no">sbthread.h</includes>
    <includes id="ckd__alloc_8h" name="ckd_alloc.h" local="yes" imported="no">ckd_alloc.h</includes>
    <includes id="err_8h" name="err.h" local="yes" imported="no">err.h</includes>
    <class kind="struct">sbthread_s</class>
    <class kind="struct">sbmsgq_s</class>
    <class kind="struct">sbevent_s</class>
    <class kind="struct">sbmtx_s</class>
    <member kind="function">
      <type>sbthread_t *</type>
      <name>sbthread_start</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>0ba06f52feda5c218dc38373e930017c</anchor>
      <arglist>(cmd_ln_t *config, sbthread_main func, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sbthread_wait</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>d4cc725834be72ea986f80c4f4ecb24d</anchor>
      <arglist>(sbthread_t *th)</arglist>
    </member>
    <member kind="function">
      <type>sbmsgq_t *</type>
      <name>sbmsgq_init</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>76852d201655b6f08ed6c35f6ebf8b4b</anchor>
      <arglist>(size_t depth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sbmsgq_free</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>a8483d06a1456207643abcfebc3b2e0a</anchor>
      <arglist>(sbmsgq_t *msgq)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sbmsgq_send</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>e6c214bf1fab2f10cb51648b7e736698</anchor>
      <arglist>(sbmsgq_t *q, size_t len, void const *data)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>sbmsgq_wait</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>5ef0a82190db1efc97e5921d2f822535</anchor>
      <arglist>(sbmsgq_t *q, size_t *out_len, int sec, int nsec)</arglist>
    </member>
    <member kind="function">
      <type>sbevent_t *</type>
      <name>sbevent_init</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>d6f018be06301acbfd2b41888ca1d345</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sbevent_free</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>bba6d18d863334a98eecbaf5ffe81ab1</anchor>
      <arglist>(sbevent_t *evt)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sbevent_signal</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>89f88d25e27146dc7e4956211e69a6d5</anchor>
      <arglist>(sbevent_t *evt)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sbevent_wait</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>9f48001ca75395a3b192902b37edd5e0</anchor>
      <arglist>(sbevent_t *evt, int sec, int nsec)</arglist>
    </member>
    <member kind="function">
      <type>sbmtx_t *</type>
      <name>sbmtx_init</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>690fb21b06b7ef9f958a4a204bc04269</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sbmtx_trylock</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>aca10c92363d8979100c8fddeb783f9a</anchor>
      <arglist>(sbmtx_t *mtx)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sbmtx_lock</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>000d9d0610c6b91649edde95e3bafa6c</anchor>
      <arglist>(sbmtx_t *mtx)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sbmtx_unlock</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>b3fdc55976e2b0581e598bd20187ce3a</anchor>
      <arglist>(sbmtx_t *mtx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sbmtx_free</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>f1f9eb876ca9fc93d6c548120af14197</anchor>
      <arglist>(sbmtx_t *mtx)</arglist>
    </member>
    <member kind="function">
      <type>cmd_ln_t *</type>
      <name>sbthread_config</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>95c25385f31541c412a458deb9ee94e5</anchor>
      <arglist>(sbthread_t *th)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>sbthread_arg</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>94e4cf2b756764e453b1469df79b3140</anchor>
      <arglist>(sbthread_t *th)</arglist>
    </member>
    <member kind="function">
      <type>sbmsgq_t *</type>
      <name>sbthread_msgq</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>f13e76cf03ad458f48f9604ec4731bdc</anchor>
      <arglist>(sbthread_t *th)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sbthread_send</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>fae533b302b310a828cf2eed1f2f5995</anchor>
      <arglist>(sbthread_t *th, size_t len, void const *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sbthread_free</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>2b80d955dab72ff602d9048551dc7489</anchor>
      <arglist>(sbthread_t *th)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>main_cepview.c</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/src/sphinx_cepview/</path>
    <filename>main__cepview_8c</filename>
    <includes id="strfuncs_8h" name="strfuncs.h" local="no" imported="no">strfuncs.h</includes>
    <includes id="prim__type_8h" name="prim_type.h" local="yes" imported="no">prim_type.h</includes>
    <includes id="cmd__ln_8h" name="cmd_ln.h" local="yes" imported="no">cmd_ln.h</includes>
    <includes id="ckd__alloc_8h" name="ckd_alloc.h" local="yes" imported="no">ckd_alloc.h</includes>
    <includes id="info_8h" name="info.h" local="yes" imported="no">info.h</includes>
    <includes id="err_8h" name="err.h" local="yes" imported="no">err.h</includes>
    <includes id="bio_8h" name="bio.h" local="yes" imported="no">bio.h</includes>
    <includes id="pio_8h" name="pio.h" local="yes" imported="no">pio.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IO_ERR</name>
      <anchorfile>main__cepview_8c.html</anchorfile>
      <anchor>2f594e19531c324dd254ba0cc712044d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IO_SUCCESS</name>
      <anchorfile>main__cepview_8c.html</anchorfile>
      <anchor>dad481c8f8fcb43725ccb11be5c690f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SHOW_ALL</name>
      <anchorfile>main__cepview_8c.html</anchorfile>
      <anchor>addcd19f0e123722b857ec68d1d3e156</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NUM_COEFF</name>
      <anchorfile>main__cepview_8c.html</anchorfile>
      <anchor>56e7544225bcd9da32fa61cde6e6f523</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DISPLAY_SIZE</name>
      <anchorfile>main__cepview_8c.html</anchorfile>
      <anchor>035c0b93babde37c8919064af8b67928</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STR_MAX_INT</name>
      <anchorfile>main__cepview_8c.html</anchorfile>
      <anchor>01f1f09f8562ef6971aa38c4f8f32954</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read_cep</name>
      <anchorfile>main__cepview_8c.html</anchorfile>
      <anchor>d215db6a8261bb1c920d087564a1dd87</anchor>
      <arglist>(char const *file, float ***cep, int *nframes, int numcep)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>main__cepview_8c.html</anchorfile>
      <anchor>0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sphinx_lm_convert.c</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/src/sphinx_lmtools/</path>
    <filename>sphinx__lm__convert_8c</filename>
    <includes id="logmath_8h" name="logmath.h" local="no" imported="no">logmath.h</includes>
    <includes id="ngram__model_8h" name="ngram_model.h" local="no" imported="no">ngram_model.h</includes>
    <includes id="cmd__ln_8h" name="cmd_ln.h" local="no" imported="no">cmd_ln.h</includes>
    <includes id="ckd__alloc_8h" name="ckd_alloc.h" local="no" imported="no">ckd_alloc.h</includes>
    <includes id="err_8h" name="err.h" local="no" imported="no">err.h</includes>
    <includes id="pio_8h" name="pio.h" local="no" imported="no">pio.h</includes>
    <includes id="strfuncs_8h" name="strfuncs.h" local="no" imported="no">strfuncs.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>sphinx__lm__convert_8c.html</anchorfile>
      <anchor>0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sphinx_lm_eval.c</name>
    <path>/usr0/home/rsingh/work/genietrain/sphinx.opensource.26may10/sphinxbase-0.6/src/sphinx_lmtools/</path>
    <filename>sphinx__lm__eval_8c</filename>
    <includes id="logmath_8h" name="logmath.h" local="no" imported="no">logmath.h</includes>
    <includes id="ngram__model_8h" name="ngram_model.h" local="no" imported="no">ngram_model.h</includes>
    <includes id="cmd__ln_8h" name="cmd_ln.h" local="no" imported="no">cmd_ln.h</includes>
    <includes id="ckd__alloc_8h" name="ckd_alloc.h" local="no" imported="no">ckd_alloc.h</includes>
    <includes id="err_8h" name="err.h" local="no" imported="no">err.h</includes>
    <includes id="pio_8h" name="pio.h" local="no" imported="no">pio.h</includes>
    <includes id="strfuncs_8h" name="strfuncs.h" local="no" imported="no">strfuncs.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>sphinx__lm__eval_8c.html</anchorfile>
      <anchor>0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>agc_s</name>
    <filename>structagc__s.html</filename>
    <member kind="variable">
      <type>mfcc_t</type>
      <name>max</name>
      <anchorfile>structagc__s.html</anchorfile>
      <anchor>6a55c54c76a2e0373a907d186b89fa8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mfcc_t</type>
      <name>obs_max</name>
      <anchorfile>structagc__s.html</anchorfile>
      <anchor>20c5289a6328895101e89cc3b418a1e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>obs_frame</name>
      <anchorfile>structagc__s.html</anchorfile>
      <anchor>5a6c2e967089085bd4f6020876bcb92a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>obs_utt</name>
      <anchorfile>structagc__s.html</anchorfile>
      <anchor>e4ce95dcfb26c7f14ea316ac3ab202b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mfcc_t</type>
      <name>obs_max_sum</name>
      <anchorfile>structagc__s.html</anchorfile>
      <anchor>760e1204ad4a77903c99d549dfaff3ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mfcc_t</type>
      <name>noise_thresh</name>
      <anchorfile>structagc__s.html</anchorfile>
      <anchor>4c896e65da00c79b77b23272474fcffc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>anytype_s</name>
    <filename>unionanytype__s.html</filename>
    <member kind="variable">
      <type>void *</type>
      <name>ptr</name>
      <anchorfile>unionanytype__s.html</anchorfile>
      <anchor>d06e5319b02ebff60fd00113baad6cf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>i</name>
      <anchorfile>unionanytype__s.html</anchorfile>
      <anchor>34ab20b326601115a718ed1ada34640f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>ui</name>
      <anchorfile>unionanytype__s.html</anchorfile>
      <anchor>702ec3b3f98e1364ce475cd5c0d3b619</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>fl</name>
      <anchorfile>unionanytype__s.html</anchorfile>
      <anchor>a819b7996e6d9530340be88e0d218590</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>arg_t</name>
    <filename>structarg__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>bigram_s</name>
    <filename>structbigram__s.html</filename>
    <member kind="variable">
      <type>uint32</type>
      <name>wid</name>
      <anchorfile>structbigram__s.html</anchorfile>
      <anchor>f66faad954d56f5ceaf6ba47cdcd9b1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>prob2</name>
      <anchorfile>structbigram__s.html</anchorfile>
      <anchor>769b8a54f864ac4844e37cfa17ed1af0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>bo_wt2</name>
      <anchorfile>structbigram__s.html</anchorfile>
      <anchor>410991054e81251285cbc209964cdaf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>trigrams</name>
      <anchorfile>structbigram__s.html</anchorfile>
      <anchor>11c1cb1d7c40de624f09c372b36a6857</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>wid</name>
      <anchorfile>structbigram__s.html</anchorfile>
      <anchor>b35dcd789b6ff87406b516493cf97854</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>classdef_s</name>
    <filename>structclassdef__s.html</filename>
    <member kind="variable">
      <type>char **</type>
      <name>words</name>
      <anchorfile>structclassdef__s.html</anchorfile>
      <anchor>9ebee54832926431cddd28f92f45479e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float32 *</type>
      <name>weights</name>
      <anchorfile>structclassdef__s.html</anchorfile>
      <anchor>85eed2992fbecae4c17d2c5c7dc7aa0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_words</name>
      <anchorfile>structclassdef__s.html</anchorfile>
      <anchor>768a3dcf739a57c145c09b55a25c8a4a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cmd_ln_t</name>
    <filename>structcmd__ln__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>cmn_t</name>
    <filename>structcmn__t.html</filename>
    <member kind="variable">
      <type>mfcc_t *</type>
      <name>cmn_mean</name>
      <anchorfile>structcmn__t.html</anchorfile>
      <anchor>ef0faa6cd93f1d9cf12659c5980aefd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mfcc_t *</type>
      <name>cmn_var</name>
      <anchorfile>structcmn__t.html</anchorfile>
      <anchor>72813f1c9423186f5bd66ecb39099eb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mfcc_t *</type>
      <name>sum</name>
      <anchorfile>structcmn__t.html</anchorfile>
      <anchor>db70819b1ca822d5a4ee6dc94b3b48e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>nframe</name>
      <anchorfile>structcmn__t.html</anchorfile>
      <anchor>456cc3313e93fa3057b658fef64a0c53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>veclen</name>
      <anchorfile>structcmn__t.html</anchorfile>
      <anchor>10472e0ad9272f764b512ade43f37d69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cont_ad_t</name>
    <filename>structcont__ad__t.html</filename>
    <member kind="variable">
      <type>int32(*</type>
      <name>adfunc</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>adf8527490391e283821a014c8645415</anchor>
      <arglist>)(ad_rec_t *ad, int16 *buf, int32 max)</arglist>
    </member>
    <member kind="variable">
      <type>ad_rec_t *</type>
      <name>ad</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>ae5b9d977e62424b0cf0e245485b20a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>rawmode</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>7726e8ea1bcca281a39c4b27bbb115e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16 *</type>
      <name>adbuf</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>719f5c6816cd0da0a31930a2e572b933</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>state</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>5d9420ea711733d1eea9b8f29a638fdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>read_ts</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>7b71e87abfcb3ca4ae73af34c86f955e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>seglen</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>478939247e09a8ae142c8996ec17d8c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>siglvl</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>5524c052dcd0a3d1a1c3b1fc2134b62e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>sps</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>11a4bb48870007b39f8fa46e4b8f111a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>eof</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>f7b9044b76ed3b86ce74e4e7215ca4c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>spf</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>55f701abf33b5f68f9ef4cbf95dfaf73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>adbufsize</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>5c6edc6be287f3ae013c59fef90cb4bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>prev_sample</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>54e2013d9634ec473aaf79a606fb2e0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>headfrm</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>a0617a92c549ac916258a54ec2cdc756</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_frm</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>bed5c6e9a2e078b70fc4c30b667612b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_sample</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>7ae5362560d9edfa6c16555285487a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>tot_frm</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>4ed32427e6a785b571b1346c85481899</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>noise_level</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>f60b0f78f9959a25cf7e7bf4c4aab4d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32 *</type>
      <name>pow_hist</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>01f61a105019bea12533db84351d07b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>frm_pow</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>18f146239c77ff4ca6157261acdf4083</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>auto_thresh</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>9e23379bf649ee06ece20133316253e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>delta_sil</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>74a6f56fb4cbde7fc789c9b463cf2f8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>delta_speech</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>fca0f69a21d9f28c9610fcefc0e7cb10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>min_noise</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>c301114b24356aef2edccba155e3cf33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>max_noise</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>f3b50663565964bb18ebb9f9e0002421</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>winsize</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>7c61513f48e8fbc9ab6b57db66dad7b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>speech_onset</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>1b0bb7e53a2bf537ed362badddca341b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>sil_onset</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>9f5e138f4b79b59bf4daa5603d171165</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>leader</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>0d42e3ac6c1e5c59c86a40f4cf26a861</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>trailer</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>a15db1e9fbb0048225521555ab8d9388</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>thresh_speech</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>0b9333d9acc41b5bfb67f69fc22ca901</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>thresh_sil</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>dbbe28dca87d06a3ca8d2390d08ea83a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>thresh_update</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>2168183b25add085cf3aa29ddab1c8ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float32</type>
      <name>adapt_rate</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>c22395096037175bf9a0a1f6877e5ec5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>tail_state</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>e52185e7f7dfe424060c0ff562a8858b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>win_startfrm</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>75bc7d23bfedfd79a2fd1e3ea2188e4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>win_validfrm</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>14ee16922e7287ad4ce8c51c6ddb74fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_other</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>628e5b444bde5e0eb0dc7fe8731a31a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>spseg_t *</type>
      <name>spseg_head</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>bffe61140bc2a02ae4222183b3ef6159</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>spseg_t *</type>
      <name>spseg_tail</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>c77e8f8bd27cea3b99238d9663455972</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FILE *</type>
      <name>rawfp</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>f8cd2a7e0ef0f4e2c825c7812a091f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FILE *</type>
      <name>logfp</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>dbbb6765386309476549beb058a235c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_calib_frame</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>c6e6809727ddc78a13674478d5b527db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fe_s</name>
    <filename>structfe__s.html</filename>
    <member kind="variable">
      <type>cmd_ln_t *</type>
      <name>config</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>be27cd07861a2f0042f5a83f3371d0fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>refcount</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>4cdf2f8b372cfddb38a48dd770450af9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float32</type>
      <name>sampling_rate</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>f79879861c60083c1c0135c380bfe8e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16</type>
      <name>frame_rate</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>23ca679cec8c0643dd1fa32b4e925f00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16</type>
      <name>frame_shift</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>62b189505f084007c3799faf3836b118</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float32</type>
      <name>window_length</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>e652f41503dd7b853bff8de89340703d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16</type>
      <name>frame_size</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>72b5838a48f3a10c8ba3917d245093d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16</type>
      <name>fft_size</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>466b997c1f544043fb3ab6f2f89e97e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>fft_order</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>3783552280c06207510cbe576a76d1d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>feature_dimension</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>9c876fb2d9be5f3acaad06ddebcdc4fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>num_cepstra</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>05579b3906420cddd62fdf1ded7b63ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>remove_dc</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>c575bed8a61105f4302bd27246d4c33d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>log_spec</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>7d3d6513ae6b60632d14c1e1d5dfe891</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>swap</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>b08200d2bfc6d868536d802501525179</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>dither</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>bd7b32a70dc6512134e39dd54d160689</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>transform</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>49f2e495d938acaf5c918059e99854e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float32</type>
      <name>pre_emphasis_alpha</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>a7dc496e33955b7f06f83715c05ded8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>seed</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>0f42573b9f0ce0247181c5dd79e16b67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16</type>
      <name>frame_counter</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>8df2a5203ac64d1dc619f99a35dd38fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>start_flag</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>a05ae3633c2b33e77a7b8b90e769176b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>reserved</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>18670c79bc0cd9848fdf4711c5094542</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>frame_t *</type>
      <name>ccc</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>fc472de43bd747de659dd57bc9a74fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>frame_t *</type>
      <name>sss</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>6525c59397073d363e1844c28746fcb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>melfb_t *</type>
      <name>mel_fb</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>e5a054dbac5e32cf028b6d6d4c9391bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>window_t *</type>
      <name>hamming_window</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>d47433337a370e452070ffddce87e474</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16 *</type>
      <name>spch</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>7d49693c1fa1b14bbcd25b87ad97935b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>frame_t *</type>
      <name>frame</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>6fe89784eb5d23ee812439f427d33fe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>powspec_t *</type>
      <name>spec</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>f455b0ee3f8d81ca84ac88d4ea04e860</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>powspec_t *</type>
      <name>mfspec</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>87fd448109884fc3d796b926b67697e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16 *</type>
      <name>overflow_samps</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>7975216c6a540fa498352736404797b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16</type>
      <name>num_overflow_samps</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>c22fe7c117ef00eb513d7d0771333ddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16</type>
      <name>prior</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>e6af635a19dac6426bf882a3fc5b069b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>feat_t</name>
    <filename>structfeat__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>fsg_model_s</name>
    <filename>structfsg__model__s.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>refcount</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>f329127556a42f6ea3b27f41a99a0b17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>name</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>b23ae2c362f1a3b18bbe135b97dfb467</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_word</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>99ed2894f7690a960d11e1590d11a6b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_word_alloc</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>329ae88c26111df8cd64657b46b9108f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char **</type>
      <name>vocab</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>6bbfce2d672624d792ff964200a64031</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bitvec_t *</type>
      <name>silwords</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>b5709e67c1b7506ab024f2060d50331c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bitvec_t *</type>
      <name>altwords</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>db51d840853d7ef3315bd833cddeb748</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>logmath_t *</type>
      <name>lmath</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>b0b22dadb593ee1901829f89c4a47fe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_state</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>80cdb0b5e7463221ce14135c9f5a3b01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>start_state</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>4ff49da3938ecc236d45a68d009f97b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>final_state</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>da19c76db4f1fc89c8b5cd674ec865da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float32</type>
      <name>lw</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>eaff529953d494b9891dbc0fdac8e97f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>glist_t **</type>
      <name>trans</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>c6ce03fadfbd11166a0eb9d9cb79b854</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>fsg_link_t ***</type>
      <name>null_trans</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>65161ba6859bcab943485ed5e3b06891</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>listelem_alloc_t *</type>
      <name>link_alloc</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>c4e2a36305bbe62a5c7468588eb058b1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gnode_s</name>
    <filename>structgnode__s.html</filename>
    <member kind="variable">
      <type>anytype_t</type>
      <name>data</name>
      <anchorfile>structgnode__s.html</anchorfile>
      <anchor>b1a86d92c42a5b45865a1db2a511b159</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct gnode_s *</type>
      <name>next</name>
      <anchorfile>structgnode__s.html</anchorfile>
      <anchor>24798080e363f9ecf9f348022c582757</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hash_entry_s</name>
    <filename>structhash__entry__s.html</filename>
    <member kind="variable">
      <type>const char *</type>
      <name>key</name>
      <anchorfile>structhash__entry__s.html</anchorfile>
      <anchor>2566ac1233761789585363a283385321</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>len</name>
      <anchorfile>structhash__entry__s.html</anchorfile>
      <anchor>f1ec5f16059ced6d9a8ae4d36ca7e2b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>val</name>
      <anchorfile>structhash__entry__s.html</anchorfile>
      <anchor>0d57012963084fed93886681108aa636</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct hash_entry_s *</type>
      <name>next</name>
      <anchorfile>structhash__entry__s.html</anchorfile>
      <anchor>a855ac854b9c36cf23f60d9ac8093e7f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>heap_s</name>
    <filename>structheap__s.html</filename>
    <member kind="variable">
      <type>void *</type>
      <name>data</name>
      <anchorfile>structheap__s.html</anchorfile>
      <anchor>26600226471833b5b535f5603456b08c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>val</name>
      <anchorfile>structheap__s.html</anchorfile>
      <anchor>2bf53cb7e38ef5c32fac4a1b1b1475df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>nl</name>
      <anchorfile>structheap__s.html</anchorfile>
      <anchor>9b7935042dd6f8c404ec607e70e4f98c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>nr</name>
      <anchorfile>structheap__s.html</anchorfile>
      <anchor>8194ad62437073a8758cd5222bf5cb9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct heap_s *</type>
      <name>l</name>
      <anchorfile>structheap__s.html</anchorfile>
      <anchor>27f089dc4bc2aad2bf7f8d6e9179f84a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct heap_s *</type>
      <name>r</name>
      <anchorfile>structheap__s.html</anchorfile>
      <anchor>ed79bab0bdb297083c6f553515156270</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lineiter_t</name>
    <filename>structlineiter__t.html</filename>
    <member kind="variable">
      <type>char *</type>
      <name>buf</name>
      <anchorfile>structlineiter__t.html</anchorfile>
      <anchor>1bf482b3c2722af76102f7b4aae08e47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>bsiz</name>
      <anchorfile>structlineiter__t.html</anchorfile>
      <anchor>b9aef9582ea19e23370fab75981ae022</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>len</name>
      <anchorfile>structlineiter__t.html</anchorfile>
      <anchor>d7faa6892d4a6d9e4e41c6d7dce4b590</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FILE *</type>
      <name>fh</name>
      <anchorfile>structlineiter__t.html</anchorfile>
      <anchor>08628d796a4850494f29f62dc0e55148</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>listelem_alloc_s</name>
    <filename>structlistelem__alloc__s.html</filename>
    <member kind="variable">
      <type>char **</type>
      <name>freelist</name>
      <anchorfile>structlistelem__alloc__s.html</anchorfile>
      <anchor>2c3be8623c5bb2d4afb3ad888790a4eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>glist_t</type>
      <name>blocks</name>
      <anchorfile>structlistelem__alloc__s.html</anchorfile>
      <anchor>1216578b1d5416dc0a03c802cfa1def9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>elemsize</name>
      <anchorfile>structlistelem__alloc__s.html</anchorfile>
      <anchor>9e27c7163c45a43f8dfd667cbc014f49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>blocksize</name>
      <anchorfile>structlistelem__alloc__s.html</anchorfile>
      <anchor>ef58c358a0b764872b322e6c3c4c19b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>blk_alloc</name>
      <anchorfile>structlistelem__alloc__s.html</anchorfile>
      <anchor>b96fd1e097105a34d6ae2e79ae8e2520</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>n_alloc</name>
      <anchorfile>structlistelem__alloc__s.html</anchorfile>
      <anchor>2a2fa0a7a1e03d6aee2f685dbc1db774</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>n_freed</name>
      <anchorfile>structlistelem__alloc__s.html</anchorfile>
      <anchor>dde313f665b6f2be9ea22f4d209e576d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lm3g_model_s</name>
    <filename>structlm3g__model__s.html</filename>
    <member kind="variable">
      <type>unigram_t *</type>
      <name>unigrams</name>
      <anchorfile>structlm3g__model__s.html</anchorfile>
      <anchor>94b4a80531261a20036cbc41b76b3f3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bigram_t *</type>
      <name>bigrams</name>
      <anchorfile>structlm3g__model__s.html</anchorfile>
      <anchor>58e72d8dd17a928d1e150e95483092ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>trigram_t *</type>
      <name>trigrams</name>
      <anchorfile>structlm3g__model__s.html</anchorfile>
      <anchor>9d10497789f7406433bccae79db63b9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lmprob_t *</type>
      <name>prob2</name>
      <anchorfile>structlm3g__model__s.html</anchorfile>
      <anchor>34acf8c1ffaa4bb712ce1196eea59678</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_prob2</name>
      <anchorfile>structlm3g__model__s.html</anchorfile>
      <anchor>273e6ea4c39d1a563cc59f00b4b6ee98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lmprob_t *</type>
      <name>bo_wt2</name>
      <anchorfile>structlm3g__model__s.html</anchorfile>
      <anchor>7ee629aa1b8e88529127cf4da470d80f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_bo_wt2</name>
      <anchorfile>structlm3g__model__s.html</anchorfile>
      <anchor>d4bbdd65d13712fe653afe8b1de9b096</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lmprob_t *</type>
      <name>prob3</name>
      <anchorfile>structlm3g__model__s.html</anchorfile>
      <anchor>dc9ed2ad1f2daefdd40713a9dd371673</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_prob3</name>
      <anchorfile>structlm3g__model__s.html</anchorfile>
      <anchor>dd28369f51e657ee54deed5291c84d09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32 *</type>
      <name>tseg_base</name>
      <anchorfile>structlm3g__model__s.html</anchorfile>
      <anchor>6cec34be6a748a9cece94ae3dfc1e8d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tginfo_t **</type>
      <name>tginfo</name>
      <anchorfile>structlm3g__model__s.html</anchorfile>
      <anchor>9be0c8197334e3ef632e9e3abdad6a4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>listelem_alloc_t *</type>
      <name>le</name>
      <anchorfile>structlm3g__model__s.html</anchorfile>
      <anchor>2c96ba8aa34632e4d42908f9384d1b01</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>lmprob_t</name>
    <filename>unionlmprob__t.html</filename>
    <member kind="variable">
      <type>float32</type>
      <name>f</name>
      <anchorfile>unionlmprob__t.html</anchorfile>
      <anchor>464d8d65be6af6899dcf63247e6f2b04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>l</name>
      <anchorfile>unionlmprob__t.html</anchorfile>
      <anchor>c48a650d5ef403456974654eaec688ca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>melfb_s</name>
    <filename>structmelfb__s.html</filename>
    <member kind="variable">
      <type>float32</type>
      <name>sampling_rate</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>6481b2124bb1c1f2dd17cfaceef34b10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>num_cepstra</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>1f196e53dd4933196b2a3aef1d2597a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>num_filters</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>3cb5379f4a24effa719296edaf484109</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>fft_size</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>9af4273d9de3551b7ce782618d9acb3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float32</type>
      <name>lower_filt_freq</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>11a5ccdcbffb5e1cc21909c4af30d494</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float32</type>
      <name>upper_filt_freq</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>c94388ee3f0ac984a0957fc90eb8bf6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mfcc_t **</type>
      <name>mel_cosine</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>8836cd634ec20bc853d3c70e0c5fb768</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mfcc_t *</type>
      <name>filt_coeffs</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>37da6d455b352696ac8340d1e77c622f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16 *</type>
      <name>spec_start</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>2586c719e90eb09baadc11add2ba3fbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16 *</type>
      <name>filt_start</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>24cdb5e426b96d0e97720dfad3a70df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16 *</type>
      <name>filt_width</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>43c26968a65602f1dce3c02e155eea39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>doublewide</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>2f1a3b5e9a985a88dd0a0c57c8e8e682</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char const *</type>
      <name>warp_type</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>925f6f7a98b33b542f6b53f7c0b1b923</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char const *</type>
      <name>warp_params</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>a7ba71c21972a822ba7f23391ff92b21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>warp_id</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>3b4d756c484accf39aeac42219b2c7ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mfcc_t</type>
      <name>sqrt_inv_n</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>1d222190206f979da6f1297197bb6e6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mfcc_t</type>
      <name>sqrt_inv_2n</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>09439f191bdf50d17505f0cfcabda229</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>lifter_val</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>605228aea9e9c9028caad09060a07b2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mfcc_t *</type>
      <name>lifter</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>362672e537cb316c538fccc141ad01f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>unit_area</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>9fc76cc06249cb211c35c04a31c8a3c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>round_filters</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>c2db1578287bd1f5a9b5eed94cc0d987</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mmio_file_s</name>
    <filename>structmmio__file__s.html</filename>
    <member kind="variable">
      <type>void *</type>
      <name>ptr</name>
      <anchorfile>structmmio__file__s.html</anchorfile>
      <anchor>e1fe8bd596a0906965970108fa849b04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>mapsize</name>
      <anchorfile>structmmio__file__s.html</anchorfile>
      <anchor>b2357ad8c44382d8ccd679801692a718</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ngram_class_s</name>
    <filename>structngram__class__s.html</filename>
    <class kind="struct">ngram_class_s::ngram_hash_s</class>
    <member kind="variable">
      <type>int32</type>
      <name>tag_wid</name>
      <anchorfile>structngram__class__s.html</anchorfile>
      <anchor>b5f3cc0142c9fd91b3c3d0e59906b556</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>start_wid</name>
      <anchorfile>structngram__class__s.html</anchorfile>
      <anchor>370c88602c7c1f7e3ff1a767c027f5cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_words</name>
      <anchorfile>structngram__class__s.html</anchorfile>
      <anchor>f13562cbc44647435f315b18df5688dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32 *</type>
      <name>prob1</name>
      <anchorfile>structngram__class__s.html</anchorfile>
      <anchor>50077f48f135f1c666745a21574e4205</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct ngram_class_s::ngram_hash_s *</type>
      <name>nword_hash</name>
      <anchorfile>structngram__class__s.html</anchorfile>
      <anchor>ab28f6b41e4020455ff2484a6fa850bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_hash</name>
      <anchorfile>structngram__class__s.html</anchorfile>
      <anchor>7f450019eb6dc2e31b18eb3ab6009920</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_hash_inuse</name>
      <anchorfile>structngram__class__s.html</anchorfile>
      <anchor>79438cd582363800bc05da31a9ca49d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ngram_class_s::ngram_hash_s</name>
    <filename>structngram__class__s_1_1ngram__hash__s.html</filename>
    <member kind="variable">
      <type>int32</type>
      <name>wid</name>
      <anchorfile>structngram__class__s_1_1ngram__hash__s.html</anchorfile>
      <anchor>d0178b5a86ec23ce790b6b7cb64db0b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>prob1</name>
      <anchorfile>structngram__class__s_1_1ngram__hash__s.html</anchorfile>
      <anchor>6ac4c01b0c8d29f770f4780e38ab0923</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>next</name>
      <anchorfile>structngram__class__s_1_1ngram__hash__s.html</anchorfile>
      <anchor>88ede5798cadc2bece12c49fa038b090</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ngram_funcs_s</name>
    <filename>structngram__funcs__s.html</filename>
    <member kind="variable">
      <type>void(*</type>
      <name>free</name>
      <anchorfile>structngram__funcs__s.html</anchorfile>
      <anchor>4211130880131f38e16022985816952f</anchor>
      <arglist>)(ngram_model_t *model)</arglist>
    </member>
    <member kind="variable">
      <type>int(*</type>
      <name>apply_weights</name>
      <anchorfile>structngram__funcs__s.html</anchorfile>
      <anchor>bfd7e53c672aef5a34ec5114ec475916</anchor>
      <arglist>)(ngram_model_t *model, float32 lw, float32 wip, float32 uw)</arglist>
    </member>
    <member kind="variable">
      <type>int32(*</type>
      <name>score</name>
      <anchorfile>structngram__funcs__s.html</anchorfile>
      <anchor>81b0c7948179c2572fb274401b82278e</anchor>
      <arglist>)(ngram_model_t *model, int32 wid, int32 *history, int32 n_hist, int32 *n_used)</arglist>
    </member>
    <member kind="variable">
      <type>int32(*</type>
      <name>raw_score</name>
      <anchorfile>structngram__funcs__s.html</anchorfile>
      <anchor>2a64c66491914168bd830237cc93b16c</anchor>
      <arglist>)(ngram_model_t *model, int32 wid, int32 *history, int32 n_hist, int32 *n_used)</arglist>
    </member>
    <member kind="variable">
      <type>int32(*</type>
      <name>add_ug</name>
      <anchorfile>structngram__funcs__s.html</anchorfile>
      <anchor>6d553c95c7f4da4993f2b9df757ac016</anchor>
      <arglist>)(ngram_model_t *model, int32 wid, int32 lweight)</arglist>
    </member>
    <member kind="variable">
      <type>void(*</type>
      <name>flush</name>
      <anchorfile>structngram__funcs__s.html</anchorfile>
      <anchor>7abf2864db9c8e8d1d5909ea92144ffe</anchor>
      <arglist>)(ngram_model_t *model)</arglist>
    </member>
    <member kind="variable">
      <type>ngram_iter_t *(*</type>
      <name>iter</name>
      <anchorfile>structngram__funcs__s.html</anchorfile>
      <anchor>8148f132a986660ff500e46f9b2ea1c1</anchor>
      <arglist>)(ngram_model_t *model, int32 wid, int32 *history, int32 n_hist)</arglist>
    </member>
    <member kind="variable">
      <type>ngram_iter_t *(*</type>
      <name>mgrams</name>
      <anchorfile>structngram__funcs__s.html</anchorfile>
      <anchor>3a264fcbdbe8b4b342c533af090cfe8f</anchor>
      <arglist>)(ngram_model_t *model, int32 m)</arglist>
    </member>
    <member kind="variable">
      <type>ngram_iter_t *(*</type>
      <name>successors</name>
      <anchorfile>structngram__funcs__s.html</anchorfile>
      <anchor>f83b5620eb7bc37984ad522b66e266ad</anchor>
      <arglist>)(ngram_iter_t *itor)</arglist>
    </member>
    <member kind="variable">
      <type>int32 const *(*</type>
      <name>iter_get</name>
      <anchorfile>structngram__funcs__s.html</anchorfile>
      <anchor>c515e6ad9a1afbda6b74e8204fd460b5</anchor>
      <arglist>)(ngram_iter_t *itor, int32 *out_score, int32 *out_bowt)</arglist>
    </member>
    <member kind="variable">
      <type>ngram_iter_t *(*</type>
      <name>iter_next</name>
      <anchorfile>structngram__funcs__s.html</anchorfile>
      <anchor>57777056985f8adc3494e859c1102f3e</anchor>
      <arglist>)(ngram_iter_t *itor)</arglist>
    </member>
    <member kind="variable">
      <type>void(*</type>
      <name>iter_free</name>
      <anchorfile>structngram__funcs__s.html</anchorfile>
      <anchor>d7031e996c16516cf7f52e7a4adee4bb</anchor>
      <arglist>)(ngram_iter_t *itor)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ngram_iter_s</name>
    <filename>structngram__iter__s.html</filename>
    <member kind="variable">
      <type>ngram_model_t *</type>
      <name>model</name>
      <anchorfile>structngram__iter__s.html</anchorfile>
      <anchor>6d8dff08c934f9153cffe70fd4961ec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32 *</type>
      <name>wids</name>
      <anchorfile>structngram__iter__s.html</anchorfile>
      <anchor>1362ebe2dcf1c441929c845fc97958cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16</type>
      <name>m</name>
      <anchorfile>structngram__iter__s.html</anchorfile>
      <anchor>80bce30ba5b180f85ca84d7288715858</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16</type>
      <name>successor</name>
      <anchorfile>structngram__iter__s.html</anchorfile>
      <anchor>7802a7883b1cc246b1bff629cd2cfb08</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ngram_model_arpa_s</name>
    <filename>structngram__model__arpa__s.html</filename>
    <member kind="variable">
      <type>ngram_model_t</type>
      <name>base</name>
      <anchorfile>structngram__model__arpa__s.html</anchorfile>
      <anchor>b09caa709057492ca333e7349e006c5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lm3g_model_t</type>
      <name>lm3g</name>
      <anchorfile>structngram__model__arpa__s.html</anchorfile>
      <anchor>be1aa64587afdcb6134c0efaad622e78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sorted_list_t</type>
      <name>sorted_prob2</name>
      <anchorfile>structngram__model__arpa__s.html</anchorfile>
      <anchor>3ce912671b868fa1ebc556c0776e2246</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sorted_list_t</type>
      <name>sorted_bo_wt2</name>
      <anchorfile>structngram__model__arpa__s.html</anchorfile>
      <anchor>d1cc307815c424daee1ea93a7192228d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sorted_list_t</type>
      <name>sorted_prob3</name>
      <anchorfile>structngram__model__arpa__s.html</anchorfile>
      <anchor>4975e5e7a036df540a27a19dce588388</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ngram_model_dmp_s</name>
    <filename>structngram__model__dmp__s.html</filename>
    <member kind="variable">
      <type>ngram_model_t</type>
      <name>base</name>
      <anchorfile>structngram__model__dmp__s.html</anchorfile>
      <anchor>fd4571dc9702255aed667b5de62e5332</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lm3g_model_t</type>
      <name>lm3g</name>
      <anchorfile>structngram__model__dmp__s.html</anchorfile>
      <anchor>f889dddcba4b473e782f4a5a11ca47bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mmio_file_t *</type>
      <name>dump_mmap</name>
      <anchorfile>structngram__model__dmp__s.html</anchorfile>
      <anchor>e86e39a2c9e3078f0d9cffc6cf384702</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ngram_model_s</name>
    <filename>structngram__model__s.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>refcount</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>3b14986e4dc40ccec1f7e206b7f41d06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32 *</type>
      <name>n_counts</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>9dcba9b49cc1cd189b257e5838da0eee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_1g_alloc</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>3e41109b30668bdfc077614c1ef49960</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_words</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>74f85927ef0d5513a1e6c02d13864be3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>n</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>3c87bc1b678662a2c8930b3b8c33a80f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>n_classes</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>deb914f8e9f011a5c960f5ee9cd33919</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>writable</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>78a3253febced2cae4732044da466ee6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>flags</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>c609a2f867496d6ca719351d566db328</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>logmath_t *</type>
      <name>lmath</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>2ca373109c651ac998b33153eb38fd95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float32</type>
      <name>lw</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>76ea0c65b23de80091e7c602bdb43bde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>log_wip</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>3d6bf5632760a16e52cb881d7010d774</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>log_uw</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>6f0ec7b8b9d13d590bbe4b59df573abc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>log_uniform</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>616bf871a67f9cedce17d6b589ee33ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>log_uniform_weight</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>a38c5fdecaefd9a2f43b69f26ae492c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>log_zero</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>65425a599c4bcc4dda809d81149b8fc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char **</type>
      <name>word_str</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>e625e779e340845f03fb3da164e93039</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hash_table_t *</type>
      <name>wid</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>75567419a8002ef6e916c81f5d9ee9ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32 *</type>
      <name>tmp_wids</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>4f910ab2c18b0e68dce92816a27fb139</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct ngram_class_s **</type>
      <name>classes</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>39384af3e6b53591d433436db011ac8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct ngram_funcs_s *</type>
      <name>funcs</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>d3d9d8ad9773f958a89534220eda6fb9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ngram_model_set_iter_s</name>
    <filename>structngram__model__set__iter__s.html</filename>
    <member kind="variable">
      <type>ngram_model_set_t *</type>
      <name>set</name>
      <anchorfile>structngram__model__set__iter__s.html</anchorfile>
      <anchor>c03199d884b9ed641141a1512f87b0cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>cur</name>
      <anchorfile>structngram__model__set__iter__s.html</anchorfile>
      <anchor>fe1dd087a0beb86a29549785ab394f91</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ngram_model_set_s</name>
    <filename>structngram__model__set__s.html</filename>
    <member kind="variable">
      <type>ngram_model_t</type>
      <name>base</name>
      <anchorfile>structngram__model__set__s.html</anchorfile>
      <anchor>3b88f17aa148ceac4f32dd4cbf5f4f81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_models</name>
      <anchorfile>structngram__model__set__s.html</anchorfile>
      <anchor>6c28858d5631a9c9dbc7b2c9583f5c5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>cur</name>
      <anchorfile>structngram__model__set__s.html</anchorfile>
      <anchor>031e7d7dcf1667f69e1cb980f45623cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ngram_model_t **</type>
      <name>lms</name>
      <anchorfile>structngram__model__set__s.html</anchorfile>
      <anchor>862d4c4feb5a903101f4a0fdc5ba8a62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char **</type>
      <name>names</name>
      <anchorfile>structngram__model__set__s.html</anchorfile>
      <anchor>ff5e13c45decde4c5bf30d8aa2b1c7d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32 *</type>
      <name>lweights</name>
      <anchorfile>structngram__model__set__s.html</anchorfile>
      <anchor>11068bb0029c788c506bec4507dd6d23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32 **</type>
      <name>widmap</name>
      <anchorfile>structngram__model__set__s.html</anchorfile>
      <anchor>ddebde44e2b7aa22dd82032c316fc962</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32 *</type>
      <name>maphist</name>
      <anchorfile>structngram__model__set__s.html</anchorfile>
      <anchor>f34ca232338c2d8c7dc8d13869ac09fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>pctr_t</name>
    <filename>structpctr__t.html</filename>
    <member kind="variable">
      <type>char *</type>
      <name>name</name>
      <anchorfile>structpctr__t.html</anchorfile>
      <anchor>9674298e968c73272d477593c7b41ed5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>count</name>
      <anchorfile>structpctr__t.html</anchorfile>
      <anchor>dc5e6467eceb66d4f56a20514d06eb55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ptmr_t</name>
    <filename>structptmr__t.html</filename>
    <member kind="variable">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>structptmr__t.html</anchorfile>
      <anchor>73b51c5a047300d77b3a82a7dcaf44f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float64</type>
      <name>t_cpu</name>
      <anchorfile>structptmr__t.html</anchorfile>
      <anchor>cbd784f7332329999925d396deae3a5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float64</type>
      <name>t_elapsed</name>
      <anchorfile>structptmr__t.html</anchorfile>
      <anchor>743fce329d82fd7a9130cba5bbccd991</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float64</type>
      <name>t_tot_cpu</name>
      <anchorfile>structptmr__t.html</anchorfile>
      <anchor>301d13acc21718143b8b39b7af8b6677</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float64</type>
      <name>t_tot_elapsed</name>
      <anchorfile>structptmr__t.html</anchorfile>
      <anchor>2dc87aa035c8eb542279ca4496dd76f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float64</type>
      <name>start_cpu</name>
      <anchorfile>structptmr__t.html</anchorfile>
      <anchor>85c0c5f0e321cf11fb478b92a05223e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float64</type>
      <name>start_elapsed</name>
      <anchorfile>structptmr__t.html</anchorfile>
      <anchor>1702b16a6c6bcb82f6c636f5e68af188</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RIFFHeader</name>
    <filename>structRIFFHeader.html</filename>
    <member kind="variable">
      <type>char</type>
      <name>rifftag</name>
      <anchorfile>structRIFFHeader.html</anchorfile>
      <anchor>41ad222f7a391957baebb72b520ca313</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>TotalLength</name>
      <anchorfile>structRIFFHeader.html</anchorfile>
      <anchor>0432c23ba2c7421bc1a918e813e89b74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>wavefmttag</name>
      <anchorfile>structRIFFHeader.html</anchorfile>
      <anchor>b02082cd826cc18e14bf1509936d96d6</anchor>
      <arglist>[8]</arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>RemainingLength</name>
      <anchorfile>structRIFFHeader.html</anchorfile>
      <anchor>4f124bd29a8d7a36de8281d2bc836353</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16</type>
      <name>data_format</name>
      <anchorfile>structRIFFHeader.html</anchorfile>
      <anchor>6d51315afb5ee7c17ec42fed06ef72df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16</type>
      <name>numchannels</name>
      <anchorfile>structRIFFHeader.html</anchorfile>
      <anchor>b639e289d0009f82f7860edd8e324daf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>SamplingFreq</name>
      <anchorfile>structRIFFHeader.html</anchorfile>
      <anchor>7723e76cc1ff383b0f4f7a053f43d31f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>BytesPerSec</name>
      <anchorfile>structRIFFHeader.html</anchorfile>
      <anchor>003ffd3a4cc8cd55c7b4031723c5bac1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16</type>
      <name>BlockAlign</name>
      <anchorfile>structRIFFHeader.html</anchorfile>
      <anchor>88c8a1a0cc69b955eada53fd28078497</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16</type>
      <name>BitsPerSample</name>
      <anchorfile>structRIFFHeader.html</anchorfile>
      <anchor>d7a6f7b03f79a574ba5edd47e9a3451c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>datatag</name>
      <anchorfile>structRIFFHeader.html</anchorfile>
      <anchor>d8c58fa74d6d52637aa6f674a3a9482d</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>datalength</name>
      <anchorfile>structRIFFHeader.html</anchorfile>
      <anchor>8900896018b1277439d20d824d8c3aba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sorted_entry_s</name>
    <filename>structsorted__entry__s.html</filename>
    <member kind="variable">
      <type>lmprob_t</type>
      <name>val</name>
      <anchorfile>structsorted__entry__s.html</anchorfile>
      <anchor>7bfd6c0c9c7240695a5909044177122f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>lower</name>
      <anchorfile>structsorted__entry__s.html</anchorfile>
      <anchor>186102da5e815345b92b1cc8895e5eb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>higher</name>
      <anchorfile>structsorted__entry__s.html</anchorfile>
      <anchor>f3d7fdd1865a965689906a2b4c12c641</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sorted_list_t</name>
    <filename>structsorted__list__t.html</filename>
    <member kind="variable">
      <type>sorted_entry_t *</type>
      <name>list</name>
      <anchorfile>structsorted__list__t.html</anchorfile>
      <anchor>9c1b67b418297e14f9f6c1ea69dd3969</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>free</name>
      <anchorfile>structsorted__list__t.html</anchorfile>
      <anchor>a7468ec9a2fe7c61d2bc76ba43c575ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spseg_t</name>
    <filename>structspseg__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>tginfo_s</name>
    <filename>structtginfo__s.html</filename>
    <member kind="variable">
      <type>int32</type>
      <name>w1</name>
      <anchorfile>structtginfo__s.html</anchorfile>
      <anchor>a151a34891820c55e0fef60cc74b6e05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_tg</name>
      <anchorfile>structtginfo__s.html</anchorfile>
      <anchor>5eb046b3d09a4c80e4cdf216c6c7eb46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>bowt</name>
      <anchorfile>structtginfo__s.html</anchorfile>
      <anchor>c5e9be48da8563941be03f3cd09e3c25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>used</name>
      <anchorfile>structtginfo__s.html</anchorfile>
      <anchor>38d6aa51b244a7138c476a6e663ffbb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>trigram_t *</type>
      <name>tg</name>
      <anchorfile>structtginfo__s.html</anchorfile>
      <anchor>3642dc5ac56de1829665bb7d42c9372a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct tginfo_s *</type>
      <name>next</name>
      <anchorfile>structtginfo__s.html</anchorfile>
      <anchor>184e60660a4c8168b5268260cd98ffa5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>trigram_s</name>
    <filename>structtrigram__s.html</filename>
    <member kind="variable">
      <type>uint32</type>
      <name>wid</name>
      <anchorfile>structtrigram__s.html</anchorfile>
      <anchor>492e1fedb16fa11d26a941177c1305be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>prob3</name>
      <anchorfile>structtrigram__s.html</anchorfile>
      <anchor>52f3fad42f7c653a469af0c1b75988a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>wid</name>
      <anchorfile>structtrigram__s.html</anchorfile>
      <anchor>d90726c9d1c5b2d564205b4feddcb674</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>U</name>
    <filename>unionU.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>d</name>
      <anchorfile>unionU.html</anchorfile>
      <anchor>6379e5194213c802bb8c6786eca8ad50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ULong</type>
      <name>L</name>
      <anchorfile>unionU.html</anchorfile>
      <anchor>a72022b00fe1608edcdbc0a12e525164</anchor>
      <arglist>[2]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>unigram_s</name>
    <filename>structunigram__s.html</filename>
    <member kind="variable">
      <type>lmprob_t</type>
      <name>prob1</name>
      <anchorfile>structunigram__s.html</anchorfile>
      <anchor>488db9623272838a933cd4b768409fea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lmprob_t</type>
      <name>bo_wt1</name>
      <anchorfile>structunigram__s.html</anchorfile>
      <anchor>d33b4af5b40a8d13ffae932bab003df6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>bigrams</name>
      <anchorfile>structunigram__s.html</anchorfile>
      <anchor>e148f631c0d9851b14bb9cb31c0c061d</anchor>
      <arglist></arglist>
    </member>
  </compound>
</tagfile>
